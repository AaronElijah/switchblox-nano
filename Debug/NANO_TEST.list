
NANO_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003998  08003998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a04  08003a04  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003a04  08003a04  00013a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a0c  08003a0c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a0c  08003a0c  00013a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a10  08003a10  00013a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000014  08003a28  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003a28  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008202  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e47  00000000  00000000  0002823e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  0002a088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000838  00000000  00000000  0002a978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000102d5  00000000  00000000  0002b1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a63b  00000000  00000000  0003b485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060de3  00000000  00000000  00045ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a68a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ee0  00000000  00000000  000a68f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003980 	.word	0x08003980

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003980 	.word	0x08003980

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	if(Is_Erase()) {
 80004a4:	f000 f834 	bl	8000510 <Is_Erase>
 80004a8:	1e03      	subs	r3, r0, #0
 80004aa:	d002      	beq.n	80004b2 <HAL_UART_RxCpltCallback+0x16>
		Erase_Eeprom_All();
 80004ac:	f000 fa08 	bl	80008c0 <Erase_Eeprom_All>
 80004b0:	e009      	b.n	80004c6 <HAL_UART_RxCpltCallback+0x2a>
	} else if(Has_Stopped()) {
 80004b2:	f000 f819 	bl	80004e8 <Has_Stopped>
 80004b6:	1e03      	subs	r3, r0, #0
 80004b8:	d003      	beq.n	80004c2 <HAL_UART_RxCpltCallback+0x26>
		Is_Commands_Ready = 1;
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <HAL_UART_RxCpltCallback+0x40>)
 80004bc:	2201      	movs	r2, #1
 80004be:	701a      	strb	r2, [r3, #0]
 80004c0:	e001      	b.n	80004c6 <HAL_UART_RxCpltCallback+0x2a>
	} else {
		Store_Temp_Command();
 80004c2:	f000 f839 	bl	8000538 <Store_Temp_Command>
	}

	HAL_UART_Receive_DMA(&huart2, Buffer_Rx, buffer_size);
 80004c6:	4906      	ldr	r1, [pc, #24]	; (80004e0 <HAL_UART_RxCpltCallback+0x44>)
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <HAL_UART_RxCpltCallback+0x48>)
 80004ca:	2204      	movs	r2, #4
 80004cc:	0018      	movs	r0, r3
 80004ce:	f002 fc79 	bl	8002dc4 <HAL_UART_Receive_DMA>
}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	b002      	add	sp, #8
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	20000030 	.word	0x20000030
 80004e0:	2000011c 	.word	0x2000011c
 80004e4:	2000012c 	.word	0x2000012c

080004e8 <Has_Stopped>:

uint8_t Has_Stopped() {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
	uint8_t value_to_check = Buffer_Rx[0];
 80004ee:	1dfb      	adds	r3, r7, #7
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <Has_Stopped+0x24>)
 80004f2:	7812      	ldrb	r2, [r2, #0]
 80004f4:	701a      	strb	r2, [r3, #0]
	switch(value_to_check) {
 80004f6:	1dfb      	adds	r3, r7, #7
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b64      	cmp	r3, #100	; 0x64
 80004fc:	d101      	bne.n	8000502 <Has_Stopped+0x1a>
		case stop_condition:
			return 1;
 80004fe:	2301      	movs	r3, #1
 8000500:	e000      	b.n	8000504 <Has_Stopped+0x1c>
		default:
			return 0;
 8000502:	2300      	movs	r3, #0
	}
	return 0;
}
 8000504:	0018      	movs	r0, r3
 8000506:	46bd      	mov	sp, r7
 8000508:	b002      	add	sp, #8
 800050a:	bd80      	pop	{r7, pc}
 800050c:	2000011c 	.word	0x2000011c

08000510 <Is_Erase>:

uint8_t Is_Erase() {
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
	uint8_t value_to_check = Buffer_Rx[0];
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	4a06      	ldr	r2, [pc, #24]	; (8000534 <Is_Erase+0x24>)
 800051a:	7812      	ldrb	r2, [r2, #0]
 800051c:	701a      	strb	r2, [r3, #0]
	switch(value_to_check) {
 800051e:	1dfb      	adds	r3, r7, #7
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b65      	cmp	r3, #101	; 0x65
 8000524:	d101      	bne.n	800052a <Is_Erase+0x1a>
		case erase_condition:
			return 1;
 8000526:	2301      	movs	r3, #1
 8000528:	e000      	b.n	800052c <Is_Erase+0x1c>
		default:
			return 0;
 800052a:	2300      	movs	r3, #0
	}
	return 0;
}
 800052c:	0018      	movs	r0, r3
 800052e:	46bd      	mov	sp, r7
 8000530:	b002      	add	sp, #8
 8000532:	bd80      	pop	{r7, pc}
 8000534:	2000011c 	.word	0x2000011c

08000538 <Store_Temp_Command>:

void Store_Temp_Command() {
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	af00      	add	r7, sp, #0
	for(Generic_Index = 0; Generic_Index < buffer_size; Generic_Index++) {
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <Store_Temp_Command+0x54>)
 800053e:	2200      	movs	r2, #0
 8000540:	701a      	strb	r2, [r3, #0]
 8000542:	e015      	b.n	8000570 <Store_Temp_Command+0x38>
		Commands_Total[Commands_Current_Index][Generic_Index] = Buffer_Rx[Generic_Index];
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <Store_Temp_Command+0x54>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	001a      	movs	r2, r3
 800054a:	4b11      	ldr	r3, [pc, #68]	; (8000590 <Store_Temp_Command+0x58>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	001c      	movs	r4, r3
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <Store_Temp_Command+0x54>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	0019      	movs	r1, r3
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <Store_Temp_Command+0x5c>)
 8000558:	5c98      	ldrb	r0, [r3, r2]
 800055a:	4a0f      	ldr	r2, [pc, #60]	; (8000598 <Store_Temp_Command+0x60>)
 800055c:	00a3      	lsls	r3, r4, #2
 800055e:	18d3      	adds	r3, r2, r3
 8000560:	1c02      	adds	r2, r0, #0
 8000562:	545a      	strb	r2, [r3, r1]
	for(Generic_Index = 0; Generic_Index < buffer_size; Generic_Index++) {
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <Store_Temp_Command+0x54>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	3301      	adds	r3, #1
 800056a:	b2da      	uxtb	r2, r3
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <Store_Temp_Command+0x54>)
 800056e:	701a      	strb	r2, [r3, #0]
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <Store_Temp_Command+0x54>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b03      	cmp	r3, #3
 8000576:	d9e5      	bls.n	8000544 <Store_Temp_Command+0xc>
	}

	Commands_Current_Index++;
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <Store_Temp_Command+0x58>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <Store_Temp_Command+0x58>)
 8000582:	701a      	strb	r2, [r3, #0]
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	bd90      	pop	{r4, r7, pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	200000cd 	.word	0x200000cd
 8000590:	20000031 	.word	0x20000031
 8000594:	2000011c 	.word	0x2000011c
 8000598:	20000034 	.word	0x20000034

0800059c <Write_Commands_To_IC>:

void Write_Commands_To_IC() {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
	for(uint8_t Cmd_Index = 0; Cmd_Index < maximum_commands; Cmd_Index++) {
 80005a2:	1dfb      	adds	r3, r7, #7
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
 80005a8:	e052      	b.n	8000650 <Write_Commands_To_IC+0xb4>
		PHY = Commands_Total[Cmd_Index][0];
 80005aa:	1dfb      	adds	r3, r7, #7
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <Write_Commands_To_IC+0xc4>)
 80005b0:	0092      	lsls	r2, r2, #2
 80005b2:	5cd2      	ldrb	r2, [r2, r3]
 80005b4:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <Write_Commands_To_IC+0xc8>)
 80005b6:	701a      	strb	r2, [r3, #0]
		REG = Commands_Total[Cmd_Index][1];
 80005b8:	1dfb      	adds	r3, r7, #7
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4a28      	ldr	r2, [pc, #160]	; (8000660 <Write_Commands_To_IC+0xc4>)
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	18d3      	adds	r3, r2, r3
 80005c2:	3301      	adds	r3, #1
 80005c4:	781a      	ldrb	r2, [r3, #0]
 80005c6:	4b28      	ldr	r3, [pc, #160]	; (8000668 <Write_Commands_To_IC+0xcc>)
 80005c8:	701a      	strb	r2, [r3, #0]

		// Test to see if PHY or REG are not acceptable values
		if(PHY < 2 || PHY > 24 || REG < 0 || REG > 32) {
 80005ca:	4b26      	ldr	r3, [pc, #152]	; (8000664 <Write_Commands_To_IC+0xc8>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d942      	bls.n	8000658 <Write_Commands_To_IC+0xbc>
 80005d2:	4b24      	ldr	r3, [pc, #144]	; (8000664 <Write_Commands_To_IC+0xc8>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b18      	cmp	r3, #24
 80005d8:	d83e      	bhi.n	8000658 <Write_Commands_To_IC+0xbc>
 80005da:	4b23      	ldr	r3, [pc, #140]	; (8000668 <Write_Commands_To_IC+0xcc>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b20      	cmp	r3, #32
 80005e0:	d83a      	bhi.n	8000658 <Write_Commands_To_IC+0xbc>
			break;
		}

		// We are going to assume that for now, the data is sent with the smallest byte [0:7] bits first, then [8:15]
		Data = ((uint16_t) Commands_Total[Cmd_Index][3] << 8) | (Commands_Total[Cmd_Index][2]);
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	4a1e      	ldr	r2, [pc, #120]	; (8000660 <Write_Commands_To_IC+0xc4>)
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	18d3      	adds	r3, r2, r3
 80005ec:	3303      	adds	r3, #3
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	021b      	lsls	r3, r3, #8
 80005f2:	b21a      	sxth	r2, r3
 80005f4:	1dfb      	adds	r3, r7, #7
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4919      	ldr	r1, [pc, #100]	; (8000660 <Write_Commands_To_IC+0xc4>)
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	18cb      	adds	r3, r1, r3
 80005fe:	3302      	adds	r3, #2
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b21b      	sxth	r3, r3
 8000604:	4313      	orrs	r3, r2
 8000606:	b21b      	sxth	r3, r3
 8000608:	b29a      	uxth	r2, r3
 800060a:	4b18      	ldr	r3, [pc, #96]	; (800066c <Write_Commands_To_IC+0xd0>)
 800060c:	801a      	strh	r2, [r3, #0]

		for(Generic_Index = 0; Generic_Index <= 10; Generic_Index++) {
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <Write_Commands_To_IC+0xd4>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
 8000614:	e013      	b.n	800063e <Write_Commands_To_IC+0xa2>
			MIIM_DRIVER_WRITE(PHY, REG, Data);
 8000616:	4b13      	ldr	r3, [pc, #76]	; (8000664 <Write_Commands_To_IC+0xc8>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	0018      	movs	r0, r3
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <Write_Commands_To_IC+0xcc>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	0019      	movs	r1, r3
 8000622:	4b12      	ldr	r3, [pc, #72]	; (800066c <Write_Commands_To_IC+0xd0>)
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	001a      	movs	r2, r3
 8000628:	f000 fc2a 	bl	8000e80 <MIIM_DRIVER_WRITE>
			HAL_Delay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f000 fdf9 	bl	8001224 <HAL_Delay>
		for(Generic_Index = 0; Generic_Index <= 10; Generic_Index++) {
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <Write_Commands_To_IC+0xd4>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	3301      	adds	r3, #1
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <Write_Commands_To_IC+0xd4>)
 800063c:	701a      	strb	r2, [r3, #0]
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <Write_Commands_To_IC+0xd4>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b0a      	cmp	r3, #10
 8000644:	d9e7      	bls.n	8000616 <Write_Commands_To_IC+0x7a>
	for(uint8_t Cmd_Index = 0; Cmd_Index < maximum_commands; Cmd_Index++) {
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	781a      	ldrb	r2, [r3, #0]
 800064a:	1dfb      	adds	r3, r7, #7
 800064c:	3201      	adds	r2, #1
 800064e:	701a      	strb	r2, [r3, #0]
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b13      	cmp	r3, #19
 8000656:	d9a8      	bls.n	80005aa <Write_Commands_To_IC+0xe>
		}
	}
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b002      	add	sp, #8
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000034 	.word	0x20000034
 8000664:	20000128 	.word	0x20000128
 8000668:	20000120 	.word	0x20000120
 800066c:	20000118 	.word	0x20000118
 8000670:	200000cd 	.word	0x200000cd

08000674 <Save_Commands_To_Eeprom>:


uint8_t Save_Commands_To_Eeprom() {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
	uint32_t Current_Eeprom_Addr = data_eeprom_base_addr;
 800067a:	4b2a      	ldr	r3, [pc, #168]	; (8000724 <Save_Commands_To_Eeprom+0xb0>)
 800067c:	607b      	str	r3, [r7, #4]
	uint32_t Data_Word;

	if (HAL_FLASHEx_DATAEEPROM_Unlock() == HAL_OK) {
 800067e:	f001 f99b 	bl	80019b8 <HAL_FLASHEx_DATAEEPROM_Unlock>
 8000682:	1e03      	subs	r3, r0, #0
 8000684:	d146      	bne.n	8000714 <Save_Commands_To_Eeprom+0xa0>
		for(Generic_Index = 0; Generic_Index < maximum_commands; Generic_Index++) {
 8000686:	4b28      	ldr	r3, [pc, #160]	; (8000728 <Save_Commands_To_Eeprom+0xb4>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
 800068c:	e034      	b.n	80006f8 <Save_Commands_To_Eeprom+0x84>
			// Write to the EEPROM address in multiples of 4 bytes as we are writing a 32 bit word at a time
			Current_Eeprom_Addr += 4;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	3304      	adds	r3, #4
 8000692:	607b      	str	r3, [r7, #4]

			Erase_Eeprom_Addr(Current_Eeprom_Addr);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	0018      	movs	r0, r3
 8000698:	f000 f84a 	bl	8000730 <Erase_Eeprom_Addr>

			// Create the 32 bit word from the 4x byte command
			Data_Word = (((uint32_t) Commands_Total[Generic_Index][3] << 24) | ((uint32_t) Commands_Total[Generic_Index][2] << 16) | ((uint32_t) Commands_Total[Generic_Index][1] << 8) | (Commands_Total[Generic_Index][0]));
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <Save_Commands_To_Eeprom+0xb4>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4a22      	ldr	r2, [pc, #136]	; (800072c <Save_Commands_To_Eeprom+0xb8>)
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	18d3      	adds	r3, r2, r3
 80006a6:	3303      	adds	r3, #3
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	061a      	lsls	r2, r3, #24
 80006ac:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <Save_Commands_To_Eeprom+0xb4>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	491e      	ldr	r1, [pc, #120]	; (800072c <Save_Commands_To_Eeprom+0xb8>)
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	18cb      	adds	r3, r1, r3
 80006b6:	3302      	adds	r3, #2
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	041b      	lsls	r3, r3, #16
 80006bc:	431a      	orrs	r2, r3
 80006be:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <Save_Commands_To_Eeprom+0xb4>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	491a      	ldr	r1, [pc, #104]	; (800072c <Save_Commands_To_Eeprom+0xb8>)
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	18cb      	adds	r3, r1, r3
 80006c8:	3301      	adds	r3, #1
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	021b      	lsls	r3, r3, #8
 80006ce:	4313      	orrs	r3, r2
 80006d0:	4a15      	ldr	r2, [pc, #84]	; (8000728 <Save_Commands_To_Eeprom+0xb4>)
 80006d2:	7812      	ldrb	r2, [r2, #0]
 80006d4:	0011      	movs	r1, r2
 80006d6:	4a15      	ldr	r2, [pc, #84]	; (800072c <Save_Commands_To_Eeprom+0xb8>)
 80006d8:	0089      	lsls	r1, r1, #2
 80006da:	5c8a      	ldrb	r2, [r1, r2]
 80006dc:	4313      	orrs	r3, r2
 80006de:	603b      	str	r3, [r7, #0]

			Write_Eeprom_Addr(Current_Eeprom_Addr, Data_Word);
 80006e0:	683a      	ldr	r2, [r7, #0]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f833 	bl	8000752 <Write_Eeprom_Addr>
		for(Generic_Index = 0; Generic_Index < maximum_commands; Generic_Index++) {
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <Save_Commands_To_Eeprom+0xb4>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	3301      	adds	r3, #1
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <Save_Commands_To_Eeprom+0xb4>)
 80006f6:	701a      	strb	r2, [r3, #0]
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <Save_Commands_To_Eeprom+0xb4>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b13      	cmp	r3, #19
 80006fe:	d9c6      	bls.n	800068e <Save_Commands_To_Eeprom+0x1a>
		}
		if(HAL_FLASHEx_DATAEEPROM_Lock() == HAL_OK) {
 8000700:	f001 f988 	bl	8001a14 <HAL_FLASHEx_DATAEEPROM_Lock>
 8000704:	1e03      	subs	r3, r0, #0
 8000706:	d101      	bne.n	800070c <Save_Commands_To_Eeprom+0x98>
			return 0;
 8000708:	2300      	movs	r3, #0
 800070a:	e006      	b.n	800071a <Save_Commands_To_Eeprom+0xa6>
		} else {
			Error_Handler();
 800070c:	f000 fa8c 	bl	8000c28 <Error_Handler>
			return 1;
 8000710:	2301      	movs	r3, #1
 8000712:	e002      	b.n	800071a <Save_Commands_To_Eeprom+0xa6>
		}
	} else {
		Error_Handler();
 8000714:	f000 fa88 	bl	8000c28 <Error_Handler>
		return 1;
 8000718:	2301      	movs	r3, #1
	}
}
 800071a:	0018      	movs	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	b002      	add	sp, #8
 8000720:	bd80      	pop	{r7, pc}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	08080000 	.word	0x08080000
 8000728:	200000cd 	.word	0x200000cd
 800072c:	20000034 	.word	0x20000034

08000730 <Erase_Eeprom_Addr>:

void Erase_Eeprom_Addr(uint32_t Eeprom_Address) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	if(HAL_FLASHEx_DATAEEPROM_Erase(Eeprom_Address) == HAL_OK) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	0018      	movs	r0, r3
 800073c:	f001 f978 	bl	8001a30 <HAL_FLASHEx_DATAEEPROM_Erase>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d002      	beq.n	800074a <Erase_Eeprom_Addr+0x1a>
		return;
	} else {
		Error_Handler();
 8000744:	f000 fa70 	bl	8000c28 <Error_Handler>
 8000748:	e000      	b.n	800074c <Erase_Eeprom_Addr+0x1c>
		return;
 800074a:	46c0      	nop			; (mov r8, r8)
	}
}
 800074c:	46bd      	mov	sp, r7
 800074e:	b002      	add	sp, #8
 8000750:	bd80      	pop	{r7, pc}

08000752 <Write_Eeprom_Addr>:

void Write_Eeprom_Addr(uint32_t Eeprom_Address, uint32_t Data) {
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	6039      	str	r1, [r7, #0]
	if(HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, Eeprom_Address, Data) == HAL_OK) {
 800075c:	683a      	ldr	r2, [r7, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	0019      	movs	r1, r3
 8000762:	2002      	movs	r0, #2
 8000764:	f001 f990 	bl	8001a88 <HAL_FLASHEx_DATAEEPROM_Program>
 8000768:	1e03      	subs	r3, r0, #0
 800076a:	d002      	beq.n	8000772 <Write_Eeprom_Addr+0x20>
		return;
	} else {
		Error_Handler();
 800076c:	f000 fa5c 	bl	8000c28 <Error_Handler>
 8000770:	e000      	b.n	8000774 <Write_Eeprom_Addr+0x22>
		return;
 8000772:	46c0      	nop			; (mov r8, r8)
	}
}
 8000774:	46bd      	mov	sp, r7
 8000776:	b002      	add	sp, #8
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <Read_Eeprom_Data>:

void Read_Eeprom_Data() {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
	uint32_t Current_Eeprom_Addr = data_eeprom_base_addr;
 8000782:	4b2c      	ldr	r3, [pc, #176]	; (8000834 <Read_Eeprom_Data+0xb8>)
 8000784:	607b      	str	r3, [r7, #4]
	uint32_t Command;

	for(Generic_Index = 0; Generic_Index < maximum_commands; Generic_Index++) {
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <Read_Eeprom_Data+0xbc>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
 800078c:	e049      	b.n	8000822 <Read_Eeprom_Data+0xa6>
		Current_Eeprom_Addr += 4;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	3304      	adds	r3, #4
 8000792:	607b      	str	r3, [r7, #4]
		Command = *(uint32_t *)(Current_Eeprom_Addr);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	603b      	str	r3, [r7, #0]

		PHY = (uint8_t) (Command & data_eeprom_first_byte_mask);
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b27      	ldr	r3, [pc, #156]	; (800083c <Read_Eeprom_Data+0xc0>)
 80007a0:	701a      	strb	r2, [r3, #0]
		REG = (uint8_t) ((Command & data_eeprom_second_byte_mask) >> 8);
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b25      	ldr	r3, [pc, #148]	; (8000840 <Read_Eeprom_Data+0xc4>)
 80007aa:	701a      	strb	r2, [r3, #0]

		// Check for invalid PHY and REG
		if(PHY < 2 || PHY > 24 || REG < 0 || REG > 32) {
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <Read_Eeprom_Data+0xc0>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d93a      	bls.n	800082a <Read_Eeprom_Data+0xae>
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <Read_Eeprom_Data+0xc0>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b18      	cmp	r3, #24
 80007ba:	d836      	bhi.n	800082a <Read_Eeprom_Data+0xae>
 80007bc:	4b20      	ldr	r3, [pc, #128]	; (8000840 <Read_Eeprom_Data+0xc4>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b20      	cmp	r3, #32
 80007c2:	d832      	bhi.n	800082a <Read_Eeprom_Data+0xae>
			break;
		}

		Commands_Total[Generic_Index][0] = PHY;
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <Read_Eeprom_Data+0xbc>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	001a      	movs	r2, r3
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <Read_Eeprom_Data+0xc0>)
 80007cc:	7819      	ldrb	r1, [r3, #0]
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <Read_Eeprom_Data+0xc8>)
 80007d0:	0092      	lsls	r2, r2, #2
 80007d2:	54d1      	strb	r1, [r2, r3]
		Commands_Total[Generic_Index][1] = REG;
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <Read_Eeprom_Data+0xbc>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	0018      	movs	r0, r3
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <Read_Eeprom_Data+0xc4>)
 80007dc:	7819      	ldrb	r1, [r3, #0]
 80007de:	4a19      	ldr	r2, [pc, #100]	; (8000844 <Read_Eeprom_Data+0xc8>)
 80007e0:	0083      	lsls	r3, r0, #2
 80007e2:	18d3      	adds	r3, r2, r3
 80007e4:	3301      	adds	r3, #1
 80007e6:	1c0a      	adds	r2, r1, #0
 80007e8:	701a      	strb	r2, [r3, #0]
		Commands_Total[Generic_Index][2] = (uint8_t) ((Command & data_eeprom_third_byte_mask) >> 16);
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	0c1a      	lsrs	r2, r3, #16
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <Read_Eeprom_Data+0xbc>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b2d1      	uxtb	r1, r2
 80007f4:	4a13      	ldr	r2, [pc, #76]	; (8000844 <Read_Eeprom_Data+0xc8>)
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	18d3      	adds	r3, r2, r3
 80007fa:	3302      	adds	r3, #2
 80007fc:	1c0a      	adds	r2, r1, #0
 80007fe:	701a      	strb	r2, [r3, #0]
		Commands_Total[Generic_Index][3] = (uint8_t) ((Command & data_eeprom_fourth_byte_mask) >> 24);
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	0e1a      	lsrs	r2, r3, #24
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <Read_Eeprom_Data+0xbc>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	b2d1      	uxtb	r1, r2
 800080a:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <Read_Eeprom_Data+0xc8>)
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	18d3      	adds	r3, r2, r3
 8000810:	3303      	adds	r3, #3
 8000812:	1c0a      	adds	r2, r1, #0
 8000814:	701a      	strb	r2, [r3, #0]
	for(Generic_Index = 0; Generic_Index < maximum_commands; Generic_Index++) {
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <Read_Eeprom_Data+0xbc>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	3301      	adds	r3, #1
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <Read_Eeprom_Data+0xbc>)
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <Read_Eeprom_Data+0xbc>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b13      	cmp	r3, #19
 8000828:	d9b1      	bls.n	800078e <Read_Eeprom_Data+0x12>
	}
}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	b002      	add	sp, #8
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	08080000 	.word	0x08080000
 8000838:	200000cd 	.word	0x200000cd
 800083c:	20000128 	.word	0x20000128
 8000840:	20000120 	.word	0x20000120
 8000844:	20000034 	.word	0x20000034

08000848 <Configuration_From_Eeprom>:

void Configuration_From_Eeprom() {
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	Read_Eeprom_Data();
 800084c:	f7ff ff96 	bl	800077c <Read_Eeprom_Data>
	Write_Commands_To_IC();
 8000850:	f7ff fea4 	bl	800059c <Write_Commands_To_IC>

	// Reset each value in the Commands_Total array
	for(Generic_Index = 0; Generic_Index < maximum_commands; Generic_Index++) {
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <Configuration_From_Eeprom+0x70>)
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
 800085a:	e024      	b.n	80008a6 <Configuration_From_Eeprom+0x5e>
		Commands_Total[Generic_Index][0] = 0;
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <Configuration_From_Eeprom+0x70>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	001a      	movs	r2, r3
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <Configuration_From_Eeprom+0x74>)
 8000864:	0092      	lsls	r2, r2, #2
 8000866:	2100      	movs	r1, #0
 8000868:	54d1      	strb	r1, [r2, r3]
		Commands_Total[Generic_Index][1] = 0;
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <Configuration_From_Eeprom+0x70>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	4a13      	ldr	r2, [pc, #76]	; (80008bc <Configuration_From_Eeprom+0x74>)
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	18d3      	adds	r3, r2, r3
 8000874:	3301      	adds	r3, #1
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
		Commands_Total[Generic_Index][2] = 0;
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <Configuration_From_Eeprom+0x70>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	4a0f      	ldr	r2, [pc, #60]	; (80008bc <Configuration_From_Eeprom+0x74>)
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	18d3      	adds	r3, r2, r3
 8000884:	3302      	adds	r3, #2
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
		Commands_Total[Generic_Index][3] = 0;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <Configuration_From_Eeprom+0x70>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <Configuration_From_Eeprom+0x74>)
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	18d3      	adds	r3, r2, r3
 8000894:	3303      	adds	r3, #3
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
	for(Generic_Index = 0; Generic_Index < maximum_commands; Generic_Index++) {
 800089a:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <Configuration_From_Eeprom+0x70>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	3301      	adds	r3, #1
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <Configuration_From_Eeprom+0x70>)
 80008a4:	701a      	strb	r2, [r3, #0]
 80008a6:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <Configuration_From_Eeprom+0x70>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b13      	cmp	r3, #19
 80008ac:	d9d6      	bls.n	800085c <Configuration_From_Eeprom+0x14>
	}
}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	200000cd 	.word	0x200000cd
 80008bc:	20000034 	.word	0x20000034

080008c0 <Erase_Eeprom_All>:

uint8_t Erase_Eeprom_All(void) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
	uint32_t Current_Eeprom_Addr = data_eeprom_base_addr;
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <Erase_Eeprom_All+0x60>)
 80008c8:	607b      	str	r3, [r7, #4]

	if(HAL_FLASHEx_DATAEEPROM_Unlock() == HAL_OK) {
 80008ca:	f001 f875 	bl	80019b8 <HAL_FLASHEx_DATAEEPROM_Unlock>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d11e      	bne.n	8000910 <Erase_Eeprom_All+0x50>
		for(Generic_Index = 0; Generic_Index < maximum_commands; Generic_Index++) {
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <Erase_Eeprom_All+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
 80008d8:	e00c      	b.n	80008f4 <Erase_Eeprom_All+0x34>
			Current_Eeprom_Addr += 4;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3304      	adds	r3, #4
 80008de:	607b      	str	r3, [r7, #4]

			Erase_Eeprom_Addr(Current_Eeprom_Addr);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	0018      	movs	r0, r3
 80008e4:	f7ff ff24 	bl	8000730 <Erase_Eeprom_Addr>
		for(Generic_Index = 0; Generic_Index < maximum_commands; Generic_Index++) {
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <Erase_Eeprom_All+0x64>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	3301      	adds	r3, #1
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <Erase_Eeprom_All+0x64>)
 80008f2:	701a      	strb	r2, [r3, #0]
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <Erase_Eeprom_All+0x64>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b13      	cmp	r3, #19
 80008fa:	d9ee      	bls.n	80008da <Erase_Eeprom_All+0x1a>

		}
		if(HAL_FLASHEx_DATAEEPROM_Lock() == HAL_OK) {
 80008fc:	f001 f88a 	bl	8001a14 <HAL_FLASHEx_DATAEEPROM_Lock>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d101      	bne.n	8000908 <Erase_Eeprom_All+0x48>
			return 0;
 8000904:	2300      	movs	r3, #0
 8000906:	e006      	b.n	8000916 <Erase_Eeprom_All+0x56>
		} else {
			Error_Handler();
 8000908:	f000 f98e 	bl	8000c28 <Error_Handler>
			return 1;
 800090c:	2301      	movs	r3, #1
 800090e:	e002      	b.n	8000916 <Erase_Eeprom_All+0x56>
		}
	} else {
		Error_Handler();
 8000910:	f000 f98a 	bl	8000c28 <Error_Handler>
		return 1;
 8000914:	2301      	movs	r3, #1
	}
}
 8000916:	0018      	movs	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	b002      	add	sp, #8
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	08080000 	.word	0x08080000
 8000924:	200000cd 	.word	0x200000cd

08000928 <Send_Error_Via_Uart>:

void Send_Error_Via_Uart() {
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, Error, sizeof(Error), 100);
 800092c:	4904      	ldr	r1, [pc, #16]	; (8000940 <Send_Error_Via_Uart+0x18>)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <Send_Error_Via_Uart+0x1c>)
 8000930:	2364      	movs	r3, #100	; 0x64
 8000932:	2201      	movs	r2, #1
 8000934:	f002 f99e 	bl	8002c74 <HAL_UART_Transmit>
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	20000000 	.word	0x20000000
 8000944:	2000012c 	.word	0x2000012c

08000948 <Send_Success_Via_Uart>:

void Send_Success_Via_Uart() {
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, Success, sizeof(Success), 100);
 800094c:	4904      	ldr	r1, [pc, #16]	; (8000960 <Send_Success_Via_Uart+0x18>)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <Send_Success_Via_Uart+0x1c>)
 8000950:	2364      	movs	r3, #100	; 0x64
 8000952:	2201      	movs	r2, #1
 8000954:	f002 f98e 	bl	8002c74 <HAL_UART_Transmit>
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	20000004 	.word	0x20000004
 8000964:	2000012c 	.word	0x2000012c

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096c:	f000 fbea 	bl	8001144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000970:	f000 f842 	bl	80009f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000974:	f000 f8fa 	bl	8000b6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000978:	f000 f8da 	bl	8000b30 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800097c:	f000 f8a8 	bl	8000ad0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8000980:	23fa      	movs	r3, #250	; 0xfa
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	0018      	movs	r0, r3
 8000986:	f000 fc4d 	bl	8001224 <HAL_Delay>
  Configuration_From_Eeprom();
 800098a:	f7ff ff5d 	bl	8000848 <Configuration_From_Eeprom>

  HAL_UART_Receive_DMA(&huart2, Buffer_Rx, buffer_size);
 800098e:	4915      	ldr	r1, [pc, #84]	; (80009e4 <main+0x7c>)
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <main+0x80>)
 8000992:	2204      	movs	r2, #4
 8000994:	0018      	movs	r0, r3
 8000996:	f002 fa15 	bl	8002dc4 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Is_Commands_Ready == 1) {
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <main+0x84>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d1fb      	bne.n	800099a <main+0x32>
	  	Write_Commands_To_IC();
 80009a2:	f7ff fdfb 	bl	800059c <Write_Commands_To_IC>
	  	Condition = Save_Commands_To_Eeprom();
 80009a6:	f7ff fe65 	bl	8000674 <Save_Commands_To_Eeprom>
 80009aa:	0003      	movs	r3, r0
 80009ac:	001a      	movs	r2, r3
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <main+0x88>)
 80009b0:	701a      	strb	r2, [r3, #0]
	  	if(Condition == 0) {
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <main+0x88>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d102      	bne.n	80009c0 <main+0x58>
	  	    // Success
	  		Send_Success_Via_Uart();
 80009ba:	f7ff ffc5 	bl	8000948 <Send_Success_Via_Uart>
 80009be:	e005      	b.n	80009cc <main+0x64>
	  	} else if(Condition == 1) {
 80009c0:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <main+0x88>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d101      	bne.n	80009cc <main+0x64>
	  		// Failure
	  		Send_Error_Via_Uart();
 80009c8:	f7ff ffae 	bl	8000928 <Send_Error_Via_Uart>
	  	}

	  	Is_Commands_Ready = 0;
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <main+0x84>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
	  	Commands_Current_Index = 0;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <main+0x8c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]

	  	// Reset the LED to emit white light
	  	HAL_Delay(500);
 80009d8:	23fa      	movs	r3, #250	; 0xfa
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 fc21 	bl	8001224 <HAL_Delay>
	  if(Is_Commands_Ready == 1) {
 80009e2:	e7da      	b.n	800099a <main+0x32>
 80009e4:	2000011c 	.word	0x2000011c
 80009e8:	2000012c 	.word	0x2000012c
 80009ec:	20000030 	.word	0x20000030
 80009f0:	200000cc 	.word	0x200000cc
 80009f4:	20000031 	.word	0x20000031

080009f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b099      	sub	sp, #100	; 0x64
 80009fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fe:	242c      	movs	r4, #44	; 0x2c
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	0018      	movs	r0, r3
 8000a04:	2334      	movs	r3, #52	; 0x34
 8000a06:	001a      	movs	r2, r3
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f002 ffb1 	bl	8003970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0e:	2318      	movs	r3, #24
 8000a10:	18fb      	adds	r3, r7, r3
 8000a12:	0018      	movs	r0, r3
 8000a14:	2314      	movs	r3, #20
 8000a16:	001a      	movs	r2, r3
 8000a18:	2100      	movs	r1, #0
 8000a1a:	f002 ffa9 	bl	8003970 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a1e:	003b      	movs	r3, r7
 8000a20:	0018      	movs	r0, r3
 8000a22:	2318      	movs	r3, #24
 8000a24:	001a      	movs	r2, r3
 8000a26:	2100      	movs	r1, #0
 8000a28:	f002 ffa2 	bl	8003970 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a2c:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <SystemClock_Config+0xd0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a26      	ldr	r2, [pc, #152]	; (8000acc <SystemClock_Config+0xd4>)
 8000a32:	401a      	ands	r2, r3
 8000a34:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <SystemClock_Config+0xd0>)
 8000a36:	2180      	movs	r1, #128	; 0x80
 8000a38:	0109      	lsls	r1, r1, #4
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a3e:	0021      	movs	r1, r4
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2210      	movs	r2, #16
 8000a44:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2201      	movs	r2, #1
 8000a4a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	22a0      	movs	r2, #160	; 0xa0
 8000a56:	0212      	lsls	r2, r2, #8
 8000a58:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	0018      	movs	r0, r3
 8000a64:	f001 f9ec 	bl	8001e40 <HAL_RCC_OscConfig>
 8000a68:	1e03      	subs	r3, r0, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a6c:	f000 f8dc 	bl	8000c28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a70:	2118      	movs	r1, #24
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	220f      	movs	r2, #15
 8000a76:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2100      	movs	r1, #0
 8000a94:	0018      	movs	r0, r3
 8000a96:	f001 fd4f 	bl	8002538 <HAL_RCC_ClockConfig>
 8000a9a:	1e03      	subs	r3, r0, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a9e:	f000 f8c3 	bl	8000c28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000aa2:	003b      	movs	r3, r7
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000aa8:	003b      	movs	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aae:	003b      	movs	r3, r7
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f001 ff65 	bl	8002980 <HAL_RCCEx_PeriphCLKConfig>
 8000ab6:	1e03      	subs	r3, r0, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000aba:	f000 f8b5 	bl	8000c28 <Error_Handler>
  }
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b019      	add	sp, #100	; 0x64
 8000ac4:	bd90      	pop	{r4, r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	40007000 	.word	0x40007000
 8000acc:	ffffe7ff 	.word	0xffffe7ff

08000ad0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000ad6:	4a15      	ldr	r2, [pc, #84]	; (8000b2c <MX_USART2_UART_Init+0x5c>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000adc:	22e1      	movs	r2, #225	; 0xe1
 8000ade:	0252      	lsls	r2, r2, #9
 8000ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000b14:	0018      	movs	r0, r3
 8000b16:	f002 f859 	bl	8002bcc <HAL_UART_Init>
 8000b1a:	1e03      	subs	r3, r0, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b1e:	f000 f883 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000012c 	.word	0x2000012c
 8000b2c:	40004400 	.word	0x40004400

08000b30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_DMA_Init+0x38>)
 8000b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_DMA_Init+0x38>)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	631a      	str	r2, [r3, #48]	; 0x30
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_DMA_Init+0x38>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	2201      	movs	r2, #1
 8000b48:	4013      	ands	r3, r2
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	200b      	movs	r0, #11
 8000b54:	f000 fc36 	bl	80013c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000b58:	200b      	movs	r0, #11
 8000b5a:	f000 fc48 	bl	80013ee <HAL_NVIC_EnableIRQ>

}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b002      	add	sp, #8
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	40021000 	.word	0x40021000

08000b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	240c      	movs	r4, #12
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	0018      	movs	r0, r3
 8000b78:	2314      	movs	r3, #20
 8000b7a:	001a      	movs	r2, r3
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	f002 fef7 	bl	8003970 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <MX_GPIO_Init+0xb4>)
 8000b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b86:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <MX_GPIO_Init+0xb4>)
 8000b88:	2101      	movs	r1, #1
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b8e:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <MX_GPIO_Init+0xb4>)
 8000b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b92:	2201      	movs	r2, #1
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <MX_GPIO_Init+0xb4>)
 8000b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b9e:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <MX_GPIO_Init+0xb4>)
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ba6:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <MX_GPIO_Init+0xb4>)
 8000ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000baa:	2202      	movs	r2, #2
 8000bac:	4013      	ands	r3, r2
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MIIM_MDIO_GPIO_Port, MIIM_MDIO_Pin, GPIO_PIN_RESET);
 8000bb2:	23a0      	movs	r3, #160	; 0xa0
 8000bb4:	05db      	lsls	r3, r3, #23
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2180      	movs	r1, #128	; 0x80
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f001 f922 	bl	8001e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MIIM_MDC_GPIO_Port, MIIM_MDC_Pin, GPIO_PIN_RESET);
 8000bc0:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <MX_GPIO_Init+0xb8>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f001 f91c 	bl	8001e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MIIM_MDIO_Pin */
  GPIO_InitStruct.Pin = MIIM_MDIO_Pin;
 8000bcc:	193b      	adds	r3, r7, r4
 8000bce:	2280      	movs	r2, #128	; 0x80
 8000bd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	193b      	adds	r3, r7, r4
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	193b      	adds	r3, r7, r4
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MIIM_MDIO_GPIO_Port, &GPIO_InitStruct);
 8000be4:	193a      	adds	r2, r7, r4
 8000be6:	23a0      	movs	r3, #160	; 0xa0
 8000be8:	05db      	lsls	r3, r3, #23
 8000bea:	0011      	movs	r1, r2
 8000bec:	0018      	movs	r0, r3
 8000bee:	f000 ffa3 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIIM_MDC_Pin */
  GPIO_InitStruct.Pin = MIIM_MDC_Pin;
 8000bf2:	0021      	movs	r1, r4
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MIIM_MDC_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <MX_GPIO_Init+0xb8>)
 8000c10:	0019      	movs	r1, r3
 8000c12:	0010      	movs	r0, r2
 8000c14:	f000 ff90 	bl	8001b38 <HAL_GPIO_Init>

}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b009      	add	sp, #36	; 0x24
 8000c1e:	bd90      	pop	{r4, r7, pc}
 8000c20:	40021000 	.word	0x40021000
 8000c24:	50000400 	.word	0x50000400

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <Error_Handler+0x8>
	...

08000c34 <_MIIM_DRIVER_CLOCK_PULSE>:
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(MIIM_MDIO_GPIO_Port, &GPIO_InitStruct);
}


void _MIIM_DRIVER_CLOCK_PULSE() {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MIIM_MDC_GPIO_Port, MIIM_MDC_Pin, GPIO_PIN_RESET);
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <_MIIM_DRIVER_CLOCK_PULSE+0x30>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f001 f8e0 	bl	8001e04 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f000 faed 	bl	8001224 <HAL_Delay>
	HAL_GPIO_WritePin(MIIM_MDC_GPIO_Port, MIIM_MDC_Pin, GPIO_PIN_SET);
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <_MIIM_DRIVER_CLOCK_PULSE+0x30>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2102      	movs	r1, #2
 8000c50:	0018      	movs	r0, r3
 8000c52:	f001 f8d7 	bl	8001e04 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c56:	2001      	movs	r0, #1
 8000c58:	f000 fae4 	bl	8001224 <HAL_Delay>
}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	50000400 	.word	0x50000400

08000c68 <_MIIM_DRIVER_START>:

void _MIIM_DRIVER_START() {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
	// Preamble
	//HAL_GPIO_WritePin(GPIOA, MIIM_MDIO_Pin, GPIO_PIN_SET);

	for (uint8_t i=0; i<5; ++i) {
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
 8000c74:	e006      	b.n	8000c84 <_MIIM_DRIVER_START+0x1c>
		_MIIM_DRIVER_CLOCK_PULSE();
 8000c76:	f7ff ffdd 	bl	8000c34 <_MIIM_DRIVER_CLOCK_PULSE>
	for (uint8_t i=0; i<5; ++i) {
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	1dfa      	adds	r2, r7, #7
 8000c7e:	7812      	ldrb	r2, [r2, #0]
 8000c80:	3201      	adds	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	1dfb      	adds	r3, r7, #7
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b04      	cmp	r3, #4
 8000c8a:	d9f4      	bls.n	8000c76 <_MIIM_DRIVER_START+0xe>
	}

	// Start clock
	HAL_GPIO_WritePin(MIIM_MDIO_GPIO_Port, MIIM_MDIO_Pin, GPIO_PIN_RESET);
 8000c8c:	23a0      	movs	r3, #160	; 0xa0
 8000c8e:	05db      	lsls	r3, r3, #23
 8000c90:	2200      	movs	r2, #0
 8000c92:	2180      	movs	r1, #128	; 0x80
 8000c94:	0018      	movs	r0, r3
 8000c96:	f001 f8b5 	bl	8001e04 <HAL_GPIO_WritePin>
	_MIIM_DRIVER_CLOCK_PULSE();
 8000c9a:	f7ff ffcb 	bl	8000c34 <_MIIM_DRIVER_CLOCK_PULSE>
	HAL_GPIO_WritePin(MIIM_MDIO_GPIO_Port, MIIM_MDIO_Pin, GPIO_PIN_SET);
 8000c9e:	23a0      	movs	r3, #160	; 0xa0
 8000ca0:	05db      	lsls	r3, r3, #23
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f001 f8ac 	bl	8001e04 <HAL_GPIO_WritePin>
	_MIIM_DRIVER_CLOCK_PULSE();
 8000cac:	f7ff ffc2 	bl	8000c34 <_MIIM_DRIVER_CLOCK_PULSE>
}
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b002      	add	sp, #8
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <_MIIM_DRIVER_OP_CODE_READ>:

void _MIIM_DRIVER_OP_CODE_READ() {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	// Data = 0b10
	HAL_GPIO_WritePin(MIIM_MDIO_GPIO_Port, MIIM_MDIO_Pin, GPIO_PIN_SET);
 8000cbc:	23a0      	movs	r3, #160	; 0xa0
 8000cbe:	05db      	lsls	r3, r3, #23
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2180      	movs	r1, #128	; 0x80
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f001 f89d 	bl	8001e04 <HAL_GPIO_WritePin>
	_MIIM_DRIVER_CLOCK_PULSE();
 8000cca:	f7ff ffb3 	bl	8000c34 <_MIIM_DRIVER_CLOCK_PULSE>
	HAL_GPIO_WritePin(MIIM_MDIO_GPIO_Port, MIIM_MDIO_Pin, GPIO_PIN_RESET);
 8000cce:	23a0      	movs	r3, #160	; 0xa0
 8000cd0:	05db      	lsls	r3, r3, #23
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2180      	movs	r1, #128	; 0x80
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f001 f894 	bl	8001e04 <HAL_GPIO_WritePin>
	_MIIM_DRIVER_CLOCK_PULSE();
 8000cdc:	f7ff ffaa 	bl	8000c34 <_MIIM_DRIVER_CLOCK_PULSE>
}
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_MIIM_DRIVER_OP_CODE_WRITE>:

void _MIIM_DRIVER_OP_CODE_WRITE() {
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	af00      	add	r7, sp, #0
	// Data = 0b01
	HAL_GPIO_WritePin(MIIM_MDIO_GPIO_Port, MIIM_MDIO_Pin, GPIO_PIN_RESET);
 8000cea:	23a0      	movs	r3, #160	; 0xa0
 8000cec:	05db      	lsls	r3, r3, #23
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f001 f886 	bl	8001e04 <HAL_GPIO_WritePin>
	_MIIM_DRIVER_CLOCK_PULSE();
 8000cf8:	f7ff ff9c 	bl	8000c34 <_MIIM_DRIVER_CLOCK_PULSE>
	HAL_GPIO_WritePin(MIIM_MDIO_GPIO_Port, MIIM_MDIO_Pin, GPIO_PIN_SET);
 8000cfc:	23a0      	movs	r3, #160	; 0xa0
 8000cfe:	05db      	lsls	r3, r3, #23
 8000d00:	2201      	movs	r2, #1
 8000d02:	2180      	movs	r1, #128	; 0x80
 8000d04:	0018      	movs	r0, r3
 8000d06:	f001 f87d 	bl	8001e04 <HAL_GPIO_WritePin>
	_MIIM_DRIVER_CLOCK_PULSE();
 8000d0a:	f7ff ff93 	bl	8000c34 <_MIIM_DRIVER_CLOCK_PULSE>
}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <_MIIM_DRIVER_PHY_REG_OUTPUT>:

void _MIIM_DRIVER_PHY_REG_OUTPUT(uint8_t PHY, uint8_t REG) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	1dfb      	adds	r3, r7, #7
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	1dbb      	adds	r3, r7, #6
 8000d22:	1c0a      	adds	r2, r1, #0
 8000d24:	701a      	strb	r2, [r3, #0]
	// Send the PHY address first
	for (uint8_t bitnum = 0; bitnum <= 4; ++bitnum) {
 8000d26:	230f      	movs	r3, #15
 8000d28:	18fb      	adds	r3, r7, r3
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	e022      	b.n	8000d76 <_MIIM_DRIVER_PHY_REG_OUTPUT+0x62>
		if ((PHY & (1 << (4-bitnum))) == 0) {
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781a      	ldrb	r2, [r3, #0]
 8000d34:	230f      	movs	r3, #15
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2104      	movs	r1, #4
 8000d3c:	1acb      	subs	r3, r1, r3
 8000d3e:	411a      	asrs	r2, r3
 8000d40:	0013      	movs	r3, r2
 8000d42:	2201      	movs	r2, #1
 8000d44:	4013      	ands	r3, r2
 8000d46:	d107      	bne.n	8000d58 <_MIIM_DRIVER_PHY_REG_OUTPUT+0x44>
			HAL_GPIO_WritePin(MIIM_MDIO_GPIO_Port, MIIM_MDIO_Pin, GPIO_PIN_RESET);
 8000d48:	23a0      	movs	r3, #160	; 0xa0
 8000d4a:	05db      	lsls	r3, r3, #23
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2180      	movs	r1, #128	; 0x80
 8000d50:	0018      	movs	r0, r3
 8000d52:	f001 f857 	bl	8001e04 <HAL_GPIO_WritePin>
 8000d56:	e006      	b.n	8000d66 <_MIIM_DRIVER_PHY_REG_OUTPUT+0x52>
		} else {
			HAL_GPIO_WritePin(MIIM_MDIO_GPIO_Port, MIIM_MDIO_Pin, GPIO_PIN_SET);
 8000d58:	23a0      	movs	r3, #160	; 0xa0
 8000d5a:	05db      	lsls	r3, r3, #23
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2180      	movs	r1, #128	; 0x80
 8000d60:	0018      	movs	r0, r3
 8000d62:	f001 f84f 	bl	8001e04 <HAL_GPIO_WritePin>
		}
		_MIIM_DRIVER_CLOCK_PULSE();
 8000d66:	f7ff ff65 	bl	8000c34 <_MIIM_DRIVER_CLOCK_PULSE>
	for (uint8_t bitnum = 0; bitnum <= 4; ++bitnum) {
 8000d6a:	220f      	movs	r2, #15
 8000d6c:	18bb      	adds	r3, r7, r2
 8000d6e:	18ba      	adds	r2, r7, r2
 8000d70:	7812      	ldrb	r2, [r2, #0]
 8000d72:	3201      	adds	r2, #1
 8000d74:	701a      	strb	r2, [r3, #0]
 8000d76:	230f      	movs	r3, #15
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	d9d7      	bls.n	8000d30 <_MIIM_DRIVER_PHY_REG_OUTPUT+0x1c>
	}

	// Send the REG address first
	for (uint8_t bitnum = 0; bitnum <= 4; ++bitnum) {
 8000d80:	230e      	movs	r3, #14
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	e022      	b.n	8000dd0 <_MIIM_DRIVER_PHY_REG_OUTPUT+0xbc>
		if ((REG & (1 << (4-bitnum))) == 0) {
 8000d8a:	1dbb      	adds	r3, r7, #6
 8000d8c:	781a      	ldrb	r2, [r3, #0]
 8000d8e:	230e      	movs	r3, #14
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2104      	movs	r1, #4
 8000d96:	1acb      	subs	r3, r1, r3
 8000d98:	411a      	asrs	r2, r3
 8000d9a:	0013      	movs	r3, r2
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	4013      	ands	r3, r2
 8000da0:	d107      	bne.n	8000db2 <_MIIM_DRIVER_PHY_REG_OUTPUT+0x9e>
			HAL_GPIO_WritePin(MIIM_MDIO_GPIO_Port, MIIM_MDIO_Pin, GPIO_PIN_RESET);
 8000da2:	23a0      	movs	r3, #160	; 0xa0
 8000da4:	05db      	lsls	r3, r3, #23
 8000da6:	2200      	movs	r2, #0
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	0018      	movs	r0, r3
 8000dac:	f001 f82a 	bl	8001e04 <HAL_GPIO_WritePin>
 8000db0:	e006      	b.n	8000dc0 <_MIIM_DRIVER_PHY_REG_OUTPUT+0xac>
		} else {
			HAL_GPIO_WritePin(MIIM_MDIO_GPIO_Port, MIIM_MDIO_Pin, GPIO_PIN_SET);
 8000db2:	23a0      	movs	r3, #160	; 0xa0
 8000db4:	05db      	lsls	r3, r3, #23
 8000db6:	2201      	movs	r2, #1
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f001 f822 	bl	8001e04 <HAL_GPIO_WritePin>
		}
		_MIIM_DRIVER_CLOCK_PULSE();
 8000dc0:	f7ff ff38 	bl	8000c34 <_MIIM_DRIVER_CLOCK_PULSE>
	for (uint8_t bitnum = 0; bitnum <= 4; ++bitnum) {
 8000dc4:	220e      	movs	r2, #14
 8000dc6:	18bb      	adds	r3, r7, r2
 8000dc8:	18ba      	adds	r2, r7, r2
 8000dca:	7812      	ldrb	r2, [r2, #0]
 8000dcc:	3201      	adds	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	230e      	movs	r3, #14
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	d9d7      	bls.n	8000d8a <_MIIM_DRIVER_PHY_REG_OUTPUT+0x76>
	}
}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b004      	add	sp, #16
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_MIIM_DRIVER_TA_WRITE>:

void _MIIM_DRIVER_TA_WRITE() {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	// The Turnaround bits for write are the same as the op code
	_MIIM_DRIVER_OP_CODE_READ();
 8000de8:	f7ff ff66 	bl	8000cb8 <_MIIM_DRIVER_OP_CODE_READ>
}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <_MIIM_DRIVER_WRITE_DATA>:
	GPIO_SET_MODE_NORMAL();
	HAL_GPIO_WritePin(MIIM_MDIO_GPIO_Port, MIIM_MDIO_Pin, GPIO_PIN_RESET);
	_MIIM_DRIVER_CLOCK_PULSE();
}

void _MIIM_DRIVER_WRITE_DATA(uint16_t data) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	0002      	movs	r2, r0
 8000dfc:	1dbb      	adds	r3, r7, #6
 8000dfe:	801a      	strh	r2, [r3, #0]
	for (uint8_t bitnum = 0; bitnum <= 15; ++bitnum) {
 8000e00:	230f      	movs	r3, #15
 8000e02:	18fb      	adds	r3, r7, r3
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
 8000e08:	e022      	b.n	8000e50 <_MIIM_DRIVER_WRITE_DATA+0x5c>
		if ((data & (1<<(15-bitnum))) == 0) {
 8000e0a:	1dbb      	adds	r3, r7, #6
 8000e0c:	881a      	ldrh	r2, [r3, #0]
 8000e0e:	230f      	movs	r3, #15
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	210f      	movs	r1, #15
 8000e16:	1acb      	subs	r3, r1, r3
 8000e18:	411a      	asrs	r2, r3
 8000e1a:	0013      	movs	r3, r2
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4013      	ands	r3, r2
 8000e20:	d107      	bne.n	8000e32 <_MIIM_DRIVER_WRITE_DATA+0x3e>
			HAL_GPIO_WritePin(MIIM_MDIO_GPIO_Port, MIIM_MDIO_Pin, GPIO_PIN_RESET);
 8000e22:	23a0      	movs	r3, #160	; 0xa0
 8000e24:	05db      	lsls	r3, r3, #23
 8000e26:	2200      	movs	r2, #0
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f000 ffea 	bl	8001e04 <HAL_GPIO_WritePin>
 8000e30:	e006      	b.n	8000e40 <_MIIM_DRIVER_WRITE_DATA+0x4c>
		} else {
			HAL_GPIO_WritePin(MIIM_MDIO_GPIO_Port, MIIM_MDIO_Pin, GPIO_PIN_SET);
 8000e32:	23a0      	movs	r3, #160	; 0xa0
 8000e34:	05db      	lsls	r3, r3, #23
 8000e36:	2201      	movs	r2, #1
 8000e38:	2180      	movs	r1, #128	; 0x80
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f000 ffe2 	bl	8001e04 <HAL_GPIO_WritePin>
		}
		_MIIM_DRIVER_CLOCK_PULSE();
 8000e40:	f7ff fef8 	bl	8000c34 <_MIIM_DRIVER_CLOCK_PULSE>
	for (uint8_t bitnum = 0; bitnum <= 15; ++bitnum) {
 8000e44:	220f      	movs	r2, #15
 8000e46:	18bb      	adds	r3, r7, r2
 8000e48:	18ba      	adds	r2, r7, r2
 8000e4a:	7812      	ldrb	r2, [r2, #0]
 8000e4c:	3201      	adds	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
 8000e50:	230f      	movs	r3, #15
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b0f      	cmp	r3, #15
 8000e58:	d9d7      	bls.n	8000e0a <_MIIM_DRIVER_WRITE_DATA+0x16>
	}
	// reset clock and data
	HAL_GPIO_WritePin(MIIM_MDIO_GPIO_Port, MIIM_MDIO_Pin, GPIO_PIN_RESET);
 8000e5a:	23a0      	movs	r3, #160	; 0xa0
 8000e5c:	05db      	lsls	r3, r3, #23
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2180      	movs	r1, #128	; 0x80
 8000e62:	0018      	movs	r0, r3
 8000e64:	f000 ffce 	bl	8001e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MIIM_MDC_GPIO_Port, MIIM_MDC_Pin, GPIO_PIN_RESET);
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <_MIIM_DRIVER_WRITE_DATA+0x88>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f000 ffc8 	bl	8001e04 <HAL_GPIO_WritePin>
	// final clock pulse afterwards?
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b004      	add	sp, #16
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	50000400 	.word	0x50000400

08000e80 <MIIM_DRIVER_WRITE>:
}



// Define MIIM bit banging functions here
void MIIM_DRIVER_WRITE(uint8_t PHY, uint8_t REG, uint16_t DATA) {
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	0004      	movs	r4, r0
 8000e88:	0008      	movs	r0, r1
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	1c22      	adds	r2, r4, #0
 8000e90:	701a      	strb	r2, [r3, #0]
 8000e92:	1dbb      	adds	r3, r7, #6
 8000e94:	1c02      	adds	r2, r0, #0
 8000e96:	701a      	strb	r2, [r3, #0]
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	1c0a      	adds	r2, r1, #0
 8000e9c:	801a      	strh	r2, [r3, #0]
       	DATA (uint16_t): The data to be send to the PHY register
    Returns:
        void
    */
	// Write the preamble + start code
	_MIIM_DRIVER_START();
 8000e9e:	f7ff fee3 	bl	8000c68 <_MIIM_DRIVER_START>

	// op code
	_MIIM_DRIVER_OP_CODE_WRITE();
 8000ea2:	f7ff ff20 	bl	8000ce6 <_MIIM_DRIVER_OP_CODE_WRITE>

	// write PHY and REG
	_MIIM_DRIVER_PHY_REG_OUTPUT(PHY, REG);
 8000ea6:	1dbb      	adds	r3, r7, #6
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	0011      	movs	r1, r2
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f7ff ff2f 	bl	8000d14 <_MIIM_DRIVER_PHY_REG_OUTPUT>

	// TA bits
	_MIIM_DRIVER_TA_WRITE();
 8000eb6:	f7ff ff95 	bl	8000de4 <_MIIM_DRIVER_TA_WRITE>

	// write data
	_MIIM_DRIVER_WRITE_DATA(DATA);
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f7ff ff98 	bl	8000df4 <_MIIM_DRIVER_WRITE_DATA>

}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b003      	add	sp, #12
 8000eca:	bd90      	pop	{r4, r7, pc}

08000ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <HAL_MspInit+0x24>)
 8000ed2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_MspInit+0x24>)
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <HAL_MspInit+0x24>)
 8000ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_MspInit+0x24>)
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	0549      	lsls	r1, r1, #21
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	240c      	movs	r4, #12
 8000efe:	193b      	adds	r3, r7, r4
 8000f00:	0018      	movs	r0, r3
 8000f02:	2314      	movs	r3, #20
 8000f04:	001a      	movs	r2, r3
 8000f06:	2100      	movs	r1, #0
 8000f08:	f002 fd32 	bl	8003970 <memset>
  if(huart->Instance==USART2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a4d      	ldr	r2, [pc, #308]	; (8001048 <HAL_UART_MspInit+0x154>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d000      	beq.n	8000f18 <HAL_UART_MspInit+0x24>
 8000f16:	e092      	b.n	800103e <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f18:	4b4c      	ldr	r3, [pc, #304]	; (800104c <HAL_UART_MspInit+0x158>)
 8000f1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f1c:	4b4b      	ldr	r3, [pc, #300]	; (800104c <HAL_UART_MspInit+0x158>)
 8000f1e:	2180      	movs	r1, #128	; 0x80
 8000f20:	0289      	lsls	r1, r1, #10
 8000f22:	430a      	orrs	r2, r1
 8000f24:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	4b49      	ldr	r3, [pc, #292]	; (800104c <HAL_UART_MspInit+0x158>)
 8000f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f2a:	4b48      	ldr	r3, [pc, #288]	; (800104c <HAL_UART_MspInit+0x158>)
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f32:	4b46      	ldr	r3, [pc, #280]	; (800104c <HAL_UART_MspInit+0x158>)
 8000f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f36:	2201      	movs	r2, #1
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA0-CK_IN     ------> USART2_RX
    PA9     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f3e:	193b      	adds	r3, r7, r4
 8000f40:	2201      	movs	r2, #1
 8000f42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	193b      	adds	r3, r7, r4
 8000f46:	2202      	movs	r2, #2
 8000f48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	193b      	adds	r3, r7, r4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	193b      	adds	r3, r7, r4
 8000f52:	2203      	movs	r2, #3
 8000f54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8000f56:	193b      	adds	r3, r7, r4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	193a      	adds	r2, r7, r4
 8000f5e:	23a0      	movs	r3, #160	; 0xa0
 8000f60:	05db      	lsls	r3, r3, #23
 8000f62:	0011      	movs	r1, r2
 8000f64:	0018      	movs	r0, r3
 8000f66:	f000 fde7 	bl	8001b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f6a:	0021      	movs	r1, r4
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	2280      	movs	r2, #128	; 0x80
 8000f70:	0092      	lsls	r2, r2, #2
 8000f72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	2202      	movs	r2, #2
 8000f78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2203      	movs	r2, #3
 8000f84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2204      	movs	r2, #4
 8000f8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	187a      	adds	r2, r7, r1
 8000f8e:	23a0      	movs	r3, #160	; 0xa0
 8000f90:	05db      	lsls	r3, r3, #23
 8000f92:	0011      	movs	r1, r2
 8000f94:	0018      	movs	r0, r3
 8000f96:	f000 fdcf 	bl	8001b38 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000f9a:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <HAL_UART_MspInit+0x15c>)
 8000f9c:	4a2d      	ldr	r2, [pc, #180]	; (8001054 <HAL_UART_MspInit+0x160>)
 8000f9e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 8000fa0:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <HAL_UART_MspInit+0x15c>)
 8000fa2:	2204      	movs	r2, #4
 8000fa4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <HAL_UART_MspInit+0x15c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fac:	4b28      	ldr	r3, [pc, #160]	; (8001050 <HAL_UART_MspInit+0x15c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fb2:	4b27      	ldr	r3, [pc, #156]	; (8001050 <HAL_UART_MspInit+0x15c>)
 8000fb4:	2280      	movs	r2, #128	; 0x80
 8000fb6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fb8:	4b25      	ldr	r3, [pc, #148]	; (8001050 <HAL_UART_MspInit+0x15c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fbe:	4b24      	ldr	r3, [pc, #144]	; (8001050 <HAL_UART_MspInit+0x15c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000fc4:	4b22      	ldr	r3, [pc, #136]	; (8001050 <HAL_UART_MspInit+0x15c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fca:	4b21      	ldr	r3, [pc, #132]	; (8001050 <HAL_UART_MspInit+0x15c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <HAL_UART_MspInit+0x15c>)
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f000 fa28 	bl	8001428 <HAL_DMA_Init>
 8000fd8:	1e03      	subs	r3, r0, #0
 8000fda:	d001      	beq.n	8000fe0 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8000fdc:	f7ff fe24 	bl	8000c28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a1b      	ldr	r2, [pc, #108]	; (8001050 <HAL_UART_MspInit+0x15c>)
 8000fe4:	671a      	str	r2, [r3, #112]	; 0x70
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <HAL_UART_MspInit+0x15c>)
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000fec:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <HAL_UART_MspInit+0x164>)
 8000fee:	4a1b      	ldr	r2, [pc, #108]	; (800105c <HAL_UART_MspInit+0x168>)
 8000ff0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_UART_MspInit+0x164>)
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_UART_MspInit+0x164>)
 8000ffa:	2210      	movs	r2, #16
 8000ffc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ffe:	4b16      	ldr	r3, [pc, #88]	; (8001058 <HAL_UART_MspInit+0x164>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_UART_MspInit+0x164>)
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <HAL_UART_MspInit+0x164>)
 800100c:	2200      	movs	r2, #0
 800100e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_UART_MspInit+0x164>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <HAL_UART_MspInit+0x164>)
 8001018:	2200      	movs	r2, #0
 800101a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_UART_MspInit+0x164>)
 800101e:	2200      	movs	r2, #0
 8001020:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <HAL_UART_MspInit+0x164>)
 8001024:	0018      	movs	r0, r3
 8001026:	f000 f9ff 	bl	8001428 <HAL_DMA_Init>
 800102a:	1e03      	subs	r3, r0, #0
 800102c:	d001      	beq.n	8001032 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 800102e:	f7ff fdfb 	bl	8000c28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a08      	ldr	r2, [pc, #32]	; (8001058 <HAL_UART_MspInit+0x164>)
 8001036:	66da      	str	r2, [r3, #108]	; 0x6c
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <HAL_UART_MspInit+0x164>)
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b009      	add	sp, #36	; 0x24
 8001044:	bd90      	pop	{r4, r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	40004400 	.word	0x40004400
 800104c:	40021000 	.word	0x40021000
 8001050:	20000084 	.word	0x20000084
 8001054:	40020058 	.word	0x40020058
 8001058:	200000d0 	.word	0x200000d0
 800105c:	40020044 	.word	0x40020044

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <NMI_Handler+0x4>

08001066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <HardFault_Handler+0x4>

0800106c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001070:	46c0      	nop			; (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001084:	f000 f8b2 	bl	80011ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and channel 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <DMA1_Channel4_5_IRQHandler+0x1c>)
 8001096:	0018      	movs	r0, r3
 8001098:	f000 faa4 	bl	80015e4 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <DMA1_Channel4_5_IRQHandler+0x20>)
 800109e:	0018      	movs	r0, r3
 80010a0:	f000 faa0 	bl	80015e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	200000d0 	.word	0x200000d0
 80010b0:	20000084 	.word	0x20000084

080010b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80010c0:	4813      	ldr	r0, [pc, #76]	; (8001110 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80010c2:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80010c4:	4813      	ldr	r0, [pc, #76]	; (8001114 <LoopForever+0x6>)
    LDR R1, [R0]
 80010c6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80010c8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80010ca:	4a13      	ldr	r2, [pc, #76]	; (8001118 <LoopForever+0xa>)
    CMP R1, R2
 80010cc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80010ce:	d105      	bne.n	80010dc <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80010d0:	4812      	ldr	r0, [pc, #72]	; (800111c <LoopForever+0xe>)
    LDR R1,=0x00000001
 80010d2:	4913      	ldr	r1, [pc, #76]	; (8001120 <LoopForever+0x12>)
    STR R1, [R0]
 80010d4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80010d6:	4813      	ldr	r0, [pc, #76]	; (8001124 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80010d8:	4913      	ldr	r1, [pc, #76]	; (8001128 <LoopForever+0x1a>)
    STR R1, [R0]
 80010da:	6001      	str	r1, [r0, #0]

080010dc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010dc:	4813      	ldr	r0, [pc, #76]	; (800112c <LoopForever+0x1e>)
  ldr r1, =_edata
 80010de:	4914      	ldr	r1, [pc, #80]	; (8001130 <LoopForever+0x22>)
  ldr r2, =_sidata
 80010e0:	4a14      	ldr	r2, [pc, #80]	; (8001134 <LoopForever+0x26>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a11      	ldr	r2, [pc, #68]	; (8001138 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80010f4:	4c11      	ldr	r4, [pc, #68]	; (800113c <LoopForever+0x2e>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001102:	f7ff ffd7 	bl	80010b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001106:	f002 fc0f 	bl	8003928 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110a:	f7ff fc2d 	bl	8000968 <main>

0800110e <LoopForever>:

LoopForever:
    b LoopForever
 800110e:	e7fe      	b.n	800110e <LoopForever>
   ldr   r0, =_estack
 8001110:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8001114:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001118:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 800111c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001120:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001124:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001128:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800112c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001130:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001134:	08003a14 	.word	0x08003a14
  ldr r2, =_sbss
 8001138:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800113c:	200001cc 	.word	0x200001cc

08001140 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC1_COMP_IRQHandler>
	...

08001144 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_Init+0x3c>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_Init+0x3c>)
 8001156:	2140      	movs	r1, #64	; 0x40
 8001158:	430a      	orrs	r2, r1
 800115a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800115c:	2000      	movs	r0, #0
 800115e:	f000 f811 	bl	8001184 <HAL_InitTick>
 8001162:	1e03      	subs	r3, r0, #0
 8001164:	d003      	beq.n	800116e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	2201      	movs	r2, #1
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	e001      	b.n	8001172 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800116e:	f7ff fead 	bl	8000ecc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	781b      	ldrb	r3, [r3, #0]
}
 8001176:	0018      	movs	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	b002      	add	sp, #8
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	40022000 	.word	0x40022000

08001184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_InitTick+0x5c>)
 800118e:	681c      	ldr	r4, [r3, #0]
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <HAL_InitTick+0x60>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	0019      	movs	r1, r3
 8001196:	23fa      	movs	r3, #250	; 0xfa
 8001198:	0098      	lsls	r0, r3, #2
 800119a:	f7fe ffb5 	bl	8000108 <__udivsi3>
 800119e:	0003      	movs	r3, r0
 80011a0:	0019      	movs	r1, r3
 80011a2:	0020      	movs	r0, r4
 80011a4:	f7fe ffb0 	bl	8000108 <__udivsi3>
 80011a8:	0003      	movs	r3, r0
 80011aa:	0018      	movs	r0, r3
 80011ac:	f000 f92f 	bl	800140e <HAL_SYSTICK_Config>
 80011b0:	1e03      	subs	r3, r0, #0
 80011b2:	d001      	beq.n	80011b8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e00f      	b.n	80011d8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d80b      	bhi.n	80011d6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	2301      	movs	r3, #1
 80011c2:	425b      	negs	r3, r3
 80011c4:	2200      	movs	r2, #0
 80011c6:	0018      	movs	r0, r3
 80011c8:	f000 f8fc 	bl	80013c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_InitTick+0x64>)
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e000      	b.n	80011d8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
}
 80011d8:	0018      	movs	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	b003      	add	sp, #12
 80011de:	bd90      	pop	{r4, r7, pc}
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000010 	.word	0x20000010
 80011e8:	2000000c 	.word	0x2000000c

080011ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_IncTick+0x1c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	001a      	movs	r2, r3
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_IncTick+0x20>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	18d2      	adds	r2, r2, r3
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <HAL_IncTick+0x20>)
 80011fe:	601a      	str	r2, [r3, #0]
}
 8001200:	46c0      	nop			; (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	20000010 	.word	0x20000010
 800120c:	200001b0 	.word	0x200001b0

08001210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  return uwTick;
 8001214:	4b02      	ldr	r3, [pc, #8]	; (8001220 <HAL_GetTick+0x10>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	0018      	movs	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	200001b0 	.word	0x200001b0

08001224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800122c:	f7ff fff0 	bl	8001210 <HAL_GetTick>
 8001230:	0003      	movs	r3, r0
 8001232:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3301      	adds	r3, #1
 800123c:	d005      	beq.n	800124a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <HAL_Delay+0x44>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	001a      	movs	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	189b      	adds	r3, r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	f7ff ffe0 	bl	8001210 <HAL_GetTick>
 8001250:	0002      	movs	r2, r0
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	429a      	cmp	r2, r3
 800125a:	d8f7      	bhi.n	800124c <HAL_Delay+0x28>
  {
  }
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	46bd      	mov	sp, r7
 8001262:	b004      	add	sp, #16
 8001264:	bd80      	pop	{r7, pc}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	20000010 	.word	0x20000010

0800126c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	0002      	movs	r2, r0
 8001274:	1dfb      	adds	r3, r7, #7
 8001276:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001278:	1dfb      	adds	r3, r7, #7
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b7f      	cmp	r3, #127	; 0x7f
 800127e:	d809      	bhi.n	8001294 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001280:	1dfb      	adds	r3, r7, #7
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	001a      	movs	r2, r3
 8001286:	231f      	movs	r3, #31
 8001288:	401a      	ands	r2, r3
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <__NVIC_EnableIRQ+0x30>)
 800128c:	2101      	movs	r1, #1
 800128e:	4091      	lsls	r1, r2
 8001290:	000a      	movs	r2, r1
 8001292:	601a      	str	r2, [r3, #0]
  }
}
 8001294:	46c0      	nop			; (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b002      	add	sp, #8
 800129a:	bd80      	pop	{r7, pc}
 800129c:	e000e100 	.word	0xe000e100

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	0002      	movs	r2, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b7f      	cmp	r3, #127	; 0x7f
 80012b4:	d828      	bhi.n	8001308 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012b6:	4a2f      	ldr	r2, [pc, #188]	; (8001374 <__NVIC_SetPriority+0xd4>)
 80012b8:	1dfb      	adds	r3, r7, #7
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	33c0      	adds	r3, #192	; 0xc0
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	589b      	ldr	r3, [r3, r2]
 80012c6:	1dfa      	adds	r2, r7, #7
 80012c8:	7812      	ldrb	r2, [r2, #0]
 80012ca:	0011      	movs	r1, r2
 80012cc:	2203      	movs	r2, #3
 80012ce:	400a      	ands	r2, r1
 80012d0:	00d2      	lsls	r2, r2, #3
 80012d2:	21ff      	movs	r1, #255	; 0xff
 80012d4:	4091      	lsls	r1, r2
 80012d6:	000a      	movs	r2, r1
 80012d8:	43d2      	mvns	r2, r2
 80012da:	401a      	ands	r2, r3
 80012dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	019b      	lsls	r3, r3, #6
 80012e2:	22ff      	movs	r2, #255	; 0xff
 80012e4:	401a      	ands	r2, r3
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	0018      	movs	r0, r3
 80012ec:	2303      	movs	r3, #3
 80012ee:	4003      	ands	r3, r0
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f4:	481f      	ldr	r0, [pc, #124]	; (8001374 <__NVIC_SetPriority+0xd4>)
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	430a      	orrs	r2, r1
 8001300:	33c0      	adds	r3, #192	; 0xc0
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001306:	e031      	b.n	800136c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001308:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <__NVIC_SetPriority+0xd8>)
 800130a:	1dfb      	adds	r3, r7, #7
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	0019      	movs	r1, r3
 8001310:	230f      	movs	r3, #15
 8001312:	400b      	ands	r3, r1
 8001314:	3b08      	subs	r3, #8
 8001316:	089b      	lsrs	r3, r3, #2
 8001318:	3306      	adds	r3, #6
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	18d3      	adds	r3, r2, r3
 800131e:	3304      	adds	r3, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	1dfa      	adds	r2, r7, #7
 8001324:	7812      	ldrb	r2, [r2, #0]
 8001326:	0011      	movs	r1, r2
 8001328:	2203      	movs	r2, #3
 800132a:	400a      	ands	r2, r1
 800132c:	00d2      	lsls	r2, r2, #3
 800132e:	21ff      	movs	r1, #255	; 0xff
 8001330:	4091      	lsls	r1, r2
 8001332:	000a      	movs	r2, r1
 8001334:	43d2      	mvns	r2, r2
 8001336:	401a      	ands	r2, r3
 8001338:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	019b      	lsls	r3, r3, #6
 800133e:	22ff      	movs	r2, #255	; 0xff
 8001340:	401a      	ands	r2, r3
 8001342:	1dfb      	adds	r3, r7, #7
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	0018      	movs	r0, r3
 8001348:	2303      	movs	r3, #3
 800134a:	4003      	ands	r3, r0
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001350:	4809      	ldr	r0, [pc, #36]	; (8001378 <__NVIC_SetPriority+0xd8>)
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	001c      	movs	r4, r3
 8001358:	230f      	movs	r3, #15
 800135a:	4023      	ands	r3, r4
 800135c:	3b08      	subs	r3, #8
 800135e:	089b      	lsrs	r3, r3, #2
 8001360:	430a      	orrs	r2, r1
 8001362:	3306      	adds	r3, #6
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	18c3      	adds	r3, r0, r3
 8001368:	3304      	adds	r3, #4
 800136a:	601a      	str	r2, [r3, #0]
}
 800136c:	46c0      	nop			; (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b003      	add	sp, #12
 8001372:	bd90      	pop	{r4, r7, pc}
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	1e5a      	subs	r2, r3, #1
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	045b      	lsls	r3, r3, #17
 800138c:	429a      	cmp	r2, r3
 800138e:	d301      	bcc.n	8001394 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001390:	2301      	movs	r3, #1
 8001392:	e010      	b.n	80013b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001394:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <SysTick_Config+0x44>)
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	3a01      	subs	r2, #1
 800139a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139c:	2301      	movs	r3, #1
 800139e:	425b      	negs	r3, r3
 80013a0:	2103      	movs	r1, #3
 80013a2:	0018      	movs	r0, r3
 80013a4:	f7ff ff7c 	bl	80012a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <SysTick_Config+0x44>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ae:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <SysTick_Config+0x44>)
 80013b0:	2207      	movs	r2, #7
 80013b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	0018      	movs	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b002      	add	sp, #8
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	e000e010 	.word	0xe000e010

080013c4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	210f      	movs	r1, #15
 80013d0:	187b      	adds	r3, r7, r1
 80013d2:	1c02      	adds	r2, r0, #0
 80013d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	0011      	movs	r1, r2
 80013e0:	0018      	movs	r0, r3
 80013e2:	f7ff ff5d 	bl	80012a0 <__NVIC_SetPriority>
}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b004      	add	sp, #16
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	0002      	movs	r2, r0
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	0018      	movs	r0, r3
 8001402:	f7ff ff33 	bl	800126c <__NVIC_EnableIRQ>
}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	46bd      	mov	sp, r7
 800140a:	b002      	add	sp, #8
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	0018      	movs	r0, r3
 800141a:	f7ff ffaf 	bl	800137c <SysTick_Config>
 800141e:	0003      	movs	r3, r0
}
 8001420:	0018      	movs	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	b002      	add	sp, #8
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e061      	b.n	80014fe <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a32      	ldr	r2, [pc, #200]	; (8001508 <HAL_DMA_Init+0xe0>)
 8001440:	4694      	mov	ip, r2
 8001442:	4463      	add	r3, ip
 8001444:	2114      	movs	r1, #20
 8001446:	0018      	movs	r0, r3
 8001448:	f7fe fe5e 	bl	8000108 <__udivsi3>
 800144c:	0003      	movs	r3, r0
 800144e:	009a      	lsls	r2, r3, #2
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a2d      	ldr	r2, [pc, #180]	; (800150c <HAL_DMA_Init+0xe4>)
 8001458:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2225      	movs	r2, #37	; 0x25
 800145e:	2102      	movs	r1, #2
 8001460:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4a28      	ldr	r2, [pc, #160]	; (8001510 <HAL_DMA_Init+0xe8>)
 800146e:	4013      	ands	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800147a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001486:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001492:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	4313      	orrs	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	01db      	lsls	r3, r3, #7
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d018      	beq.n	80014e6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_DMA_Init+0xec>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014bc:	211c      	movs	r1, #28
 80014be:	400b      	ands	r3, r1
 80014c0:	210f      	movs	r1, #15
 80014c2:	4099      	lsls	r1, r3
 80014c4:	000b      	movs	r3, r1
 80014c6:	43d9      	mvns	r1, r3
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_DMA_Init+0xec>)
 80014ca:	400a      	ands	r2, r1
 80014cc:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_DMA_Init+0xec>)
 80014d0:	6819      	ldr	r1, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	201c      	movs	r0, #28
 80014dc:	4003      	ands	r3, r0
 80014de:	409a      	lsls	r2, r3
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <HAL_DMA_Init+0xec>)
 80014e2:	430a      	orrs	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2225      	movs	r2, #37	; 0x25
 80014f0:	2101      	movs	r1, #1
 80014f2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2224      	movs	r2, #36	; 0x24
 80014f8:	2100      	movs	r1, #0
 80014fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	0018      	movs	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	b004      	add	sp, #16
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	bffdfff8 	.word	0xbffdfff8
 800150c:	40020000 	.word	0x40020000
 8001510:	ffff800f 	.word	0xffff800f
 8001514:	400200a8 	.word	0x400200a8

08001518 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001526:	2317      	movs	r3, #23
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2224      	movs	r2, #36	; 0x24
 8001532:	5c9b      	ldrb	r3, [r3, r2]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d101      	bne.n	800153c <HAL_DMA_Start_IT+0x24>
 8001538:	2302      	movs	r3, #2
 800153a:	e04f      	b.n	80015dc <HAL_DMA_Start_IT+0xc4>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2224      	movs	r2, #36	; 0x24
 8001540:	2101      	movs	r1, #1
 8001542:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2225      	movs	r2, #37	; 0x25
 8001548:	5c9b      	ldrb	r3, [r3, r2]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b01      	cmp	r3, #1
 800154e:	d13a      	bne.n	80015c6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2225      	movs	r2, #37	; 0x25
 8001554:	2102      	movs	r1, #2
 8001556:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2101      	movs	r1, #1
 800156a:	438a      	bics	r2, r1
 800156c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	68b9      	ldr	r1, [r7, #8]
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f000 f8e3 	bl	8001740 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	2b00      	cmp	r3, #0
 8001580:	d008      	beq.n	8001594 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	210e      	movs	r1, #14
 800158e:	430a      	orrs	r2, r1
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	e00f      	b.n	80015b4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2104      	movs	r1, #4
 80015a0:	438a      	bics	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	210a      	movs	r1, #10
 80015b0:	430a      	orrs	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2101      	movs	r1, #1
 80015c0:	430a      	orrs	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	e007      	b.n	80015d6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2224      	movs	r2, #36	; 0x24
 80015ca:	2100      	movs	r1, #0
 80015cc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80015ce:	2317      	movs	r3, #23
 80015d0:	18fb      	adds	r3, r7, r3
 80015d2:	2202      	movs	r2, #2
 80015d4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80015d6:	2317      	movs	r3, #23
 80015d8:	18fb      	adds	r3, r7, r3
 80015da:	781b      	ldrb	r3, [r3, #0]
}
 80015dc:	0018      	movs	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	b006      	add	sp, #24
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	221c      	movs	r2, #28
 8001602:	4013      	ands	r3, r2
 8001604:	2204      	movs	r2, #4
 8001606:	409a      	lsls	r2, r3
 8001608:	0013      	movs	r3, r2
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	4013      	ands	r3, r2
 800160e:	d026      	beq.n	800165e <HAL_DMA_IRQHandler+0x7a>
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2204      	movs	r2, #4
 8001614:	4013      	ands	r3, r2
 8001616:	d022      	beq.n	800165e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2220      	movs	r2, #32
 8001620:	4013      	ands	r3, r2
 8001622:	d107      	bne.n	8001634 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2104      	movs	r1, #4
 8001630:	438a      	bics	r2, r1
 8001632:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001638:	221c      	movs	r2, #28
 800163a:	401a      	ands	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	2104      	movs	r1, #4
 8001642:	4091      	lsls	r1, r2
 8001644:	000a      	movs	r2, r1
 8001646:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	2b00      	cmp	r3, #0
 800164e:	d100      	bne.n	8001652 <HAL_DMA_IRQHandler+0x6e>
 8001650:	e071      	b.n	8001736 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	0010      	movs	r0, r2
 800165a:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800165c:	e06b      	b.n	8001736 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	221c      	movs	r2, #28
 8001664:	4013      	ands	r3, r2
 8001666:	2202      	movs	r2, #2
 8001668:	409a      	lsls	r2, r3
 800166a:	0013      	movs	r3, r2
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	4013      	ands	r3, r2
 8001670:	d02d      	beq.n	80016ce <HAL_DMA_IRQHandler+0xea>
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	2202      	movs	r2, #2
 8001676:	4013      	ands	r3, r2
 8001678:	d029      	beq.n	80016ce <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2220      	movs	r2, #32
 8001682:	4013      	ands	r3, r2
 8001684:	d10b      	bne.n	800169e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	210a      	movs	r1, #10
 8001692:	438a      	bics	r2, r1
 8001694:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2225      	movs	r2, #37	; 0x25
 800169a:	2101      	movs	r1, #1
 800169c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	221c      	movs	r2, #28
 80016a4:	401a      	ands	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	2102      	movs	r1, #2
 80016ac:	4091      	lsls	r1, r2
 80016ae:	000a      	movs	r2, r1
 80016b0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2224      	movs	r2, #36	; 0x24
 80016b6:	2100      	movs	r1, #0
 80016b8:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d039      	beq.n	8001736 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	0010      	movs	r0, r2
 80016ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016cc:	e033      	b.n	8001736 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	221c      	movs	r2, #28
 80016d4:	4013      	ands	r3, r2
 80016d6:	2208      	movs	r2, #8
 80016d8:	409a      	lsls	r2, r3
 80016da:	0013      	movs	r3, r2
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	4013      	ands	r3, r2
 80016e0:	d02a      	beq.n	8001738 <HAL_DMA_IRQHandler+0x154>
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	2208      	movs	r2, #8
 80016e6:	4013      	ands	r3, r2
 80016e8:	d026      	beq.n	8001738 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	210e      	movs	r1, #14
 80016f6:	438a      	bics	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	221c      	movs	r2, #28
 8001700:	401a      	ands	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	2101      	movs	r1, #1
 8001708:	4091      	lsls	r1, r2
 800170a:	000a      	movs	r2, r1
 800170c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2225      	movs	r2, #37	; 0x25
 8001718:	2101      	movs	r1, #1
 800171a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2224      	movs	r2, #36	; 0x24
 8001720:	2100      	movs	r1, #0
 8001722:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	0010      	movs	r0, r2
 8001734:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	46c0      	nop			; (mov r8, r8)
}
 800173a:	46bd      	mov	sp, r7
 800173c:	b004      	add	sp, #16
 800173e:	bd80      	pop	{r7, pc}

08001740 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	221c      	movs	r2, #28
 8001754:	401a      	ands	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	2101      	movs	r1, #1
 800175c:	4091      	lsls	r1, r2
 800175e:	000a      	movs	r2, r1
 8001760:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b10      	cmp	r3, #16
 8001770:	d108      	bne.n	8001784 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001782:	e007      	b.n	8001794 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	60da      	str	r2, [r3, #12]
}
 8001794:	46c0      	nop			; (mov r8, r8)
 8001796:	46bd      	mov	sp, r7
 8001798:	b004      	add	sp, #16
 800179a:	bd80      	pop	{r7, pc}

0800179c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80017a4:	f7ff fd34 	bl	8001210 <HAL_GetTick>
 80017a8:	0003      	movs	r3, r0
 80017aa:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80017ac:	e00f      	b.n	80017ce <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3301      	adds	r3, #1
 80017b2:	d00c      	beq.n	80017ce <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d007      	beq.n	80017ca <FLASH_WaitForLastOperation+0x2e>
 80017ba:	f7ff fd29 	bl	8001210 <HAL_GetTick>
 80017be:	0002      	movs	r2, r0
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d201      	bcs.n	80017ce <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e052      	b.n	8001874 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <FLASH_WaitForLastOperation+0xe0>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2201      	movs	r2, #1
 80017d4:	4013      	ands	r3, r2
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d0e9      	beq.n	80017ae <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80017da:	4b28      	ldr	r3, [pc, #160]	; (800187c <FLASH_WaitForLastOperation+0xe0>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2202      	movs	r2, #2
 80017e0:	4013      	ands	r3, r2
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d102      	bne.n	80017ec <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80017e6:	4b25      	ldr	r3, [pc, #148]	; (800187c <FLASH_WaitForLastOperation+0xe0>)
 80017e8:	2202      	movs	r2, #2
 80017ea:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80017ec:	4b23      	ldr	r3, [pc, #140]	; (800187c <FLASH_WaitForLastOperation+0xe0>)
 80017ee:	699a      	ldr	r2, [r3, #24]
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	401a      	ands	r2, r3
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d035      	beq.n	800186a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80017fe:	4b1f      	ldr	r3, [pc, #124]	; (800187c <FLASH_WaitForLastOperation+0xe0>)
 8001800:	699a      	ldr	r2, [r3, #24]
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	429a      	cmp	r2, r3
 800180e:	d02c      	beq.n	800186a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <FLASH_WaitForLastOperation+0xe0>)
 8001812:	699a      	ldr	r2, [r3, #24]
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	429a      	cmp	r2, r3
 8001820:	d023      	beq.n	800186a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <FLASH_WaitForLastOperation+0xe0>)
 8001824:	699a      	ldr	r2, [r3, #24]
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	429a      	cmp	r2, r3
 8001832:	d01a      	beq.n	800186a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <FLASH_WaitForLastOperation+0xe0>)
 8001836:	699a      	ldr	r2, [r3, #24]
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	019b      	lsls	r3, r3, #6
 800183c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	019b      	lsls	r3, r3, #6
 8001842:	429a      	cmp	r2, r3
 8001844:	d011      	beq.n	800186a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8001846:	4b0d      	ldr	r3, [pc, #52]	; (800187c <FLASH_WaitForLastOperation+0xe0>)
 8001848:	699a      	ldr	r2, [r3, #24]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	029b      	lsls	r3, r3, #10
 800184e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	029b      	lsls	r3, r3, #10
 8001854:	429a      	cmp	r2, r3
 8001856:	d008      	beq.n	800186a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <FLASH_WaitForLastOperation+0xe0>)
 800185a:	699a      	ldr	r2, [r3, #24]
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	025b      	lsls	r3, r3, #9
 8001860:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	025b      	lsls	r3, r3, #9
 8001866:	429a      	cmp	r2, r3
 8001868:	d103      	bne.n	8001872 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800186a:	f000 f809 	bl	8001880 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	0018      	movs	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	b004      	add	sp, #16
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40022000 	.word	0x40022000

08001880 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800188a:	4b49      	ldr	r3, [pc, #292]	; (80019b0 <FLASH_SetErrorCode+0x130>)
 800188c:	699a      	ldr	r2, [r3, #24]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	401a      	ands	r2, r3
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	429a      	cmp	r2, r3
 800189a:	d10a      	bne.n	80018b2 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800189c:	4b45      	ldr	r3, [pc, #276]	; (80019b4 <FLASH_SetErrorCode+0x134>)
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	2202      	movs	r2, #2
 80018a2:	431a      	orrs	r2, r3
 80018a4:	4b43      	ldr	r3, [pc, #268]	; (80019b4 <FLASH_SetErrorCode+0x134>)
 80018a6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2280      	movs	r2, #128	; 0x80
 80018ac:	0052      	lsls	r2, r2, #1
 80018ae:	4313      	orrs	r3, r2
 80018b0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80018b2:	4b3f      	ldr	r3, [pc, #252]	; (80019b0 <FLASH_SetErrorCode+0x130>)
 80018b4:	699a      	ldr	r2, [r3, #24]
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	401a      	ands	r2, r3
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d10a      	bne.n	80018da <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80018c4:	4b3b      	ldr	r3, [pc, #236]	; (80019b4 <FLASH_SetErrorCode+0x134>)
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	2201      	movs	r2, #1
 80018ca:	431a      	orrs	r2, r3
 80018cc:	4b39      	ldr	r3, [pc, #228]	; (80019b4 <FLASH_SetErrorCode+0x134>)
 80018ce:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2280      	movs	r2, #128	; 0x80
 80018d4:	0092      	lsls	r2, r2, #2
 80018d6:	4313      	orrs	r3, r2
 80018d8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80018da:	4b35      	ldr	r3, [pc, #212]	; (80019b0 <FLASH_SetErrorCode+0x130>)
 80018dc:	699a      	ldr	r2, [r3, #24]
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	401a      	ands	r2, r3
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d10a      	bne.n	8001902 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80018ec:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <FLASH_SetErrorCode+0x134>)
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	2208      	movs	r2, #8
 80018f2:	431a      	orrs	r2, r3
 80018f4:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <FLASH_SetErrorCode+0x134>)
 80018f6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2280      	movs	r2, #128	; 0x80
 80018fc:	00d2      	lsls	r2, r2, #3
 80018fe:	4313      	orrs	r3, r2
 8001900:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001902:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <FLASH_SetErrorCode+0x130>)
 8001904:	699a      	ldr	r2, [r3, #24]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	401a      	ands	r2, r3
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	429a      	cmp	r2, r3
 8001912:	d10a      	bne.n	800192a <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001914:	4b27      	ldr	r3, [pc, #156]	; (80019b4 <FLASH_SetErrorCode+0x134>)
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	2204      	movs	r2, #4
 800191a:	431a      	orrs	r2, r3
 800191c:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <FLASH_SetErrorCode+0x134>)
 800191e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2280      	movs	r2, #128	; 0x80
 8001924:	0112      	lsls	r2, r2, #4
 8001926:	4313      	orrs	r3, r2
 8001928:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <FLASH_SetErrorCode+0x130>)
 800192c:	699a      	ldr	r2, [r3, #24]
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	019b      	lsls	r3, r3, #6
 8001932:	401a      	ands	r2, r3
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	019b      	lsls	r3, r3, #6
 8001938:	429a      	cmp	r2, r3
 800193a:	d10a      	bne.n	8001952 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800193c:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <FLASH_SetErrorCode+0x134>)
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	2210      	movs	r2, #16
 8001942:	431a      	orrs	r2, r3
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <FLASH_SetErrorCode+0x134>)
 8001946:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2280      	movs	r2, #128	; 0x80
 800194c:	0192      	lsls	r2, r2, #6
 800194e:	4313      	orrs	r3, r2
 8001950:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <FLASH_SetErrorCode+0x130>)
 8001954:	699a      	ldr	r2, [r3, #24]
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	029b      	lsls	r3, r3, #10
 800195a:	401a      	ands	r2, r3
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	029b      	lsls	r3, r3, #10
 8001960:	429a      	cmp	r2, r3
 8001962:	d109      	bne.n	8001978 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <FLASH_SetErrorCode+0x134>)
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	2220      	movs	r2, #32
 800196a:	431a      	orrs	r2, r3
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <FLASH_SetErrorCode+0x134>)
 800196e:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2220      	movs	r2, #32
 8001974:	4313      	orrs	r3, r2
 8001976:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <FLASH_SetErrorCode+0x130>)
 800197a:	699a      	ldr	r2, [r3, #24]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	025b      	lsls	r3, r3, #9
 8001980:	401a      	ands	r2, r3
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	025b      	lsls	r3, r3, #9
 8001986:	429a      	cmp	r2, r3
 8001988:	d10a      	bne.n	80019a0 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <FLASH_SetErrorCode+0x134>)
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	2240      	movs	r2, #64	; 0x40
 8001990:	431a      	orrs	r2, r3
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <FLASH_SetErrorCode+0x134>)
 8001994:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2280      	movs	r2, #128	; 0x80
 800199a:	0252      	lsls	r2, r2, #9
 800199c:	4313      	orrs	r3, r2
 800199e:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <FLASH_SetErrorCode+0x130>)
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	619a      	str	r2, [r3, #24]
}  
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b002      	add	sp, #8
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	40022000 	.word	0x40022000
 80019b4:	200001b4 	.word	0x200001b4

080019b8 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	4013      	ands	r3, r2
 80019c6:	d019      	beq.n	80019fc <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019c8:	f3ef 8310 	mrs	r3, PRIMASK
 80019cc:	607b      	str	r3, [r7, #4]
  return(result);
 80019ce:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 80019d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80019d2:	b672      	cpsid	i
}
 80019d4:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80019d8:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 80019da:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80019de:	4a0c      	ldr	r2, [pc, #48]	; (8001a10 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	f383 8810 	msr	PRIMASK, r3
}
 80019ec:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	4013      	ands	r3, r2
 80019f6:	d001      	beq.n	80019fc <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	0018      	movs	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b004      	add	sp, #16
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	40022000 	.word	0x40022000
 8001a0c:	89abcdef 	.word	0x89abcdef
 8001a10:	02030405 	.word	0x02030405

08001a14 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8001a1e:	2101      	movs	r1, #1
 8001a20:	430a      	orrs	r2, r1
 8001a22:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	0018      	movs	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40022000 	.word	0x40022000

08001a30 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8001a30:	b5b0      	push	{r4, r5, r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a38:	250f      	movs	r5, #15
 8001a3a:	197b      	adds	r3, r7, r5
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a40:	197c      	adds	r4, r7, r5
 8001a42:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8001a44:	0018      	movs	r0, r3
 8001a46:	f7ff fea9 	bl	800179c <FLASH_WaitForLastOperation>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8001a4e:	0029      	movs	r1, r5
 8001a50:	187b      	adds	r3, r7, r1
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10c      	bne.n	8001a72 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a64:	187c      	adds	r4, r7, r1
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f7ff fe97 	bl	800179c <FLASH_WaitForLastOperation>
 8001a6e:	0003      	movs	r3, r0
 8001a70:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 8001a72:	230f      	movs	r3, #15
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	781b      	ldrb	r3, [r3, #0]
}  
 8001a78:	0018      	movs	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b004      	add	sp, #16
 8001a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a80:	0000c350 	.word	0x0000c350
 8001a84:	200001b4 	.word	0x200001b4

08001a88 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8001a88:	b5b0      	push	{r4, r5, r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a94:	2317      	movs	r3, #23
 8001a96:	18fb      	adds	r3, r7, r3
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a9c:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8001a9e:	7c1b      	ldrb	r3, [r3, #16]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e03e      	b.n	8001b26 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001aae:	2517      	movs	r5, #23
 8001ab0:	197c      	adds	r4, r7, r5
 8001ab2:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7ff fe71 	bl	800179c <FLASH_WaitForLastOperation>
 8001aba:	0003      	movs	r3, r0
 8001abc:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8001abe:	197b      	adds	r3, r7, r5
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d129      	bne.n	8001b1a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d103      	bne.n	8001ada <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	e013      	b.n	8001b02 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d104      	bne.n	8001aea <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	b292      	uxth	r2, r2
 8001ae6:	801a      	strh	r2, [r3, #0]
 8001ae8:	e00b      	b.n	8001b02 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d104      	bne.n	8001afa <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	701a      	strb	r2, [r3, #0]
 8001af8:	e003      	b.n	8001b02 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8001afa:	2317      	movs	r3, #23
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]
    }

    if (status != HAL_OK)
 8001b02:	2217      	movs	r2, #23
 8001b04:	18bb      	adds	r3, r7, r2
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d006      	beq.n	8001b1a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001b0c:	18bc      	adds	r4, r7, r2
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8001b10:	0018      	movs	r0, r3
 8001b12:	f7ff fe43 	bl	800179c <FLASH_WaitForLastOperation>
 8001b16:	0003      	movs	r3, r0
 8001b18:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	741a      	strb	r2, [r3, #16]

  return status;
 8001b20:	2317      	movs	r3, #23
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	781b      	ldrb	r3, [r3, #0]
}
 8001b26:	0018      	movs	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b006      	add	sp, #24
 8001b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	200001b4 	.word	0x200001b4
 8001b34:	0000c350 	.word	0x0000c350

08001b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b4e:	e143      	b.n	8001dd8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2101      	movs	r1, #1
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4091      	lsls	r1, r2
 8001b5a:	000a      	movs	r2, r1
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d100      	bne.n	8001b68 <HAL_GPIO_Init+0x30>
 8001b66:	e134      	b.n	8001dd2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d00b      	beq.n	8001b88 <HAL_GPIO_Init+0x50>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d007      	beq.n	8001b88 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b7c:	2b11      	cmp	r3, #17
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b12      	cmp	r3, #18
 8001b86:	d130      	bne.n	8001bea <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	409a      	lsls	r2, r3
 8001b96:	0013      	movs	r3, r2
 8001b98:	43da      	mvns	r2, r3
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	0013      	movs	r3, r2
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	0013      	movs	r3, r2
 8001bc6:	43da      	mvns	r2, r3
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	0013      	movs	r3, r2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	0013      	movs	r3, r2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0xf2>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b12      	cmp	r3, #18
 8001c28:	d123      	bne.n	8001c72 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	08da      	lsrs	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3208      	adds	r2, #8
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	58d3      	ldr	r3, [r2, r3]
 8001c36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2207      	movs	r2, #7
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	220f      	movs	r2, #15
 8001c42:	409a      	lsls	r2, r3
 8001c44:	0013      	movs	r3, r2
 8001c46:	43da      	mvns	r2, r3
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	691a      	ldr	r2, [r3, #16]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2107      	movs	r1, #7
 8001c56:	400b      	ands	r3, r1
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	0013      	movs	r3, r2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	08da      	lsrs	r2, r3, #3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3208      	adds	r2, #8
 8001c6c:	0092      	lsls	r2, r2, #2
 8001c6e:	6939      	ldr	r1, [r7, #16]
 8001c70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	409a      	lsls	r2, r3
 8001c80:	0013      	movs	r3, r2
 8001c82:	43da      	mvns	r2, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2203      	movs	r2, #3
 8001c90:	401a      	ands	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	409a      	lsls	r2, r3
 8001c98:	0013      	movs	r3, r2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	055b      	lsls	r3, r3, #21
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d100      	bne.n	8001cb4 <HAL_GPIO_Init+0x17c>
 8001cb2:	e08e      	b.n	8001dd2 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb4:	4b4e      	ldr	r3, [pc, #312]	; (8001df0 <HAL_GPIO_Init+0x2b8>)
 8001cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb8:	4b4d      	ldr	r3, [pc, #308]	; (8001df0 <HAL_GPIO_Init+0x2b8>)
 8001cba:	2101      	movs	r1, #1
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cc0:	4a4c      	ldr	r2, [pc, #304]	; (8001df4 <HAL_GPIO_Init+0x2bc>)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	089b      	lsrs	r3, r3, #2
 8001cc6:	3302      	adds	r3, #2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	589b      	ldr	r3, [r3, r2]
 8001ccc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	220f      	movs	r2, #15
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	0013      	movs	r3, r2
 8001cdc:	43da      	mvns	r2, r3
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	23a0      	movs	r3, #160	; 0xa0
 8001ce8:	05db      	lsls	r3, r3, #23
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d00d      	beq.n	8001d0a <HAL_GPIO_Init+0x1d2>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a41      	ldr	r2, [pc, #260]	; (8001df8 <HAL_GPIO_Init+0x2c0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d007      	beq.n	8001d06 <HAL_GPIO_Init+0x1ce>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a40      	ldr	r2, [pc, #256]	; (8001dfc <HAL_GPIO_Init+0x2c4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d101      	bne.n	8001d02 <HAL_GPIO_Init+0x1ca>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e004      	b.n	8001d0c <HAL_GPIO_Init+0x1d4>
 8001d02:	2306      	movs	r3, #6
 8001d04:	e002      	b.n	8001d0c <HAL_GPIO_Init+0x1d4>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_GPIO_Init+0x1d4>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	2103      	movs	r1, #3
 8001d10:	400a      	ands	r2, r1
 8001d12:	0092      	lsls	r2, r2, #2
 8001d14:	4093      	lsls	r3, r2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d1c:	4935      	ldr	r1, [pc, #212]	; (8001df4 <HAL_GPIO_Init+0x2bc>)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d2a:	4b35      	ldr	r3, [pc, #212]	; (8001e00 <HAL_GPIO_Init+0x2c8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	43da      	mvns	r2, r3
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	025b      	lsls	r3, r3, #9
 8001d42:	4013      	ands	r3, r2
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d4e:	4b2c      	ldr	r3, [pc, #176]	; (8001e00 <HAL_GPIO_Init+0x2c8>)
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001d54:	4b2a      	ldr	r3, [pc, #168]	; (8001e00 <HAL_GPIO_Init+0x2c8>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	43da      	mvns	r2, r3
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	029b      	lsls	r3, r3, #10
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d78:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <HAL_GPIO_Init+0x2c8>)
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7e:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <HAL_GPIO_Init+0x2c8>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	43da      	mvns	r2, r3
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	035b      	lsls	r3, r3, #13
 8001d96:	4013      	ands	r3, r2
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001da2:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <HAL_GPIO_Init+0x2c8>)
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001da8:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <HAL_GPIO_Init+0x2c8>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	43da      	mvns	r2, r3
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	039b      	lsls	r3, r3, #14
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <HAL_GPIO_Init+0x2c8>)
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	40da      	lsrs	r2, r3
 8001de0:	1e13      	subs	r3, r2, #0
 8001de2:	d000      	beq.n	8001de6 <HAL_GPIO_Init+0x2ae>
 8001de4:	e6b4      	b.n	8001b50 <HAL_GPIO_Init+0x18>
  }
}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	46c0      	nop			; (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b006      	add	sp, #24
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40010000 	.word	0x40010000
 8001df8:	50000400 	.word	0x50000400
 8001dfc:	50000800 	.word	0x50000800
 8001e00:	40010400 	.word	0x40010400

08001e04 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	0008      	movs	r0, r1
 8001e0e:	0011      	movs	r1, r2
 8001e10:	1cbb      	adds	r3, r7, #2
 8001e12:	1c02      	adds	r2, r0, #0
 8001e14:	801a      	strh	r2, [r3, #0]
 8001e16:	1c7b      	adds	r3, r7, #1
 8001e18:	1c0a      	adds	r2, r1, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e1c:	1c7b      	adds	r3, r7, #1
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d004      	beq.n	8001e2e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e24:	1cbb      	adds	r3, r7, #2
 8001e26:	881a      	ldrh	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001e2c:	e003      	b.n	8001e36 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001e2e:	1cbb      	adds	r3, r7, #2
 8001e30:	881a      	ldrh	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b002      	add	sp, #8
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e40:	b5b0      	push	{r4, r5, r7, lr}
 8001e42:	b08a      	sub	sp, #40	; 0x28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d102      	bne.n	8001e54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	f000 fb6c 	bl	800252c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e54:	4bc8      	ldr	r3, [pc, #800]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	220c      	movs	r2, #12
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e5e:	4bc6      	ldr	r3, [pc, #792]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	025b      	lsls	r3, r3, #9
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4013      	ands	r3, r2
 8001e72:	d100      	bne.n	8001e76 <HAL_RCC_OscConfig+0x36>
 8001e74:	e07d      	b.n	8001f72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d007      	beq.n	8001e8c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	2b0c      	cmp	r3, #12
 8001e80:	d112      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x68>
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	025b      	lsls	r3, r3, #9
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d10d      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8c:	4bba      	ldr	r3, [pc, #744]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	029b      	lsls	r3, r3, #10
 8001e94:	4013      	ands	r3, r2
 8001e96:	d100      	bne.n	8001e9a <HAL_RCC_OscConfig+0x5a>
 8001e98:	e06a      	b.n	8001f70 <HAL_RCC_OscConfig+0x130>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d166      	bne.n	8001f70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	f000 fb42 	bl	800252c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	025b      	lsls	r3, r3, #9
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d107      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x84>
 8001eb4:	4bb0      	ldr	r3, [pc, #704]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4baf      	ldr	r3, [pc, #700]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001eba:	2180      	movs	r1, #128	; 0x80
 8001ebc:	0249      	lsls	r1, r1, #9
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	e027      	b.n	8001f14 <HAL_RCC_OscConfig+0xd4>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	23a0      	movs	r3, #160	; 0xa0
 8001eca:	02db      	lsls	r3, r3, #11
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d10e      	bne.n	8001eee <HAL_RCC_OscConfig+0xae>
 8001ed0:	4ba9      	ldr	r3, [pc, #676]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4ba8      	ldr	r3, [pc, #672]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001ed6:	2180      	movs	r1, #128	; 0x80
 8001ed8:	02c9      	lsls	r1, r1, #11
 8001eda:	430a      	orrs	r2, r1
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	4ba6      	ldr	r3, [pc, #664]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	4ba5      	ldr	r3, [pc, #660]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001ee4:	2180      	movs	r1, #128	; 0x80
 8001ee6:	0249      	lsls	r1, r1, #9
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	e012      	b.n	8001f14 <HAL_RCC_OscConfig+0xd4>
 8001eee:	4ba2      	ldr	r3, [pc, #648]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	4ba1      	ldr	r3, [pc, #644]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001ef4:	49a1      	ldr	r1, [pc, #644]	; (800217c <HAL_RCC_OscConfig+0x33c>)
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	4b9f      	ldr	r3, [pc, #636]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	025b      	lsls	r3, r3, #9
 8001f02:	4013      	ands	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4b9b      	ldr	r3, [pc, #620]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b9a      	ldr	r3, [pc, #616]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001f0e:	499c      	ldr	r1, [pc, #624]	; (8002180 <HAL_RCC_OscConfig+0x340>)
 8001f10:	400a      	ands	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d014      	beq.n	8001f46 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff f978 	bl	8001210 <HAL_GetTick>
 8001f20:	0003      	movs	r3, r0
 8001f22:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f26:	f7ff f973 	bl	8001210 <HAL_GetTick>
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b64      	cmp	r3, #100	; 0x64
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e2f9      	b.n	800252c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f38:	4b8f      	ldr	r3, [pc, #572]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	029b      	lsls	r3, r3, #10
 8001f40:	4013      	ands	r3, r2
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0xe6>
 8001f44:	e015      	b.n	8001f72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f46:	f7ff f963 	bl	8001210 <HAL_GetTick>
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f50:	f7ff f95e 	bl	8001210 <HAL_GetTick>
 8001f54:	0002      	movs	r2, r0
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b64      	cmp	r3, #100	; 0x64
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e2e4      	b.n	800252c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f62:	4b85      	ldr	r3, [pc, #532]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	029b      	lsls	r3, r3, #10
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x110>
 8001f6e:	e000      	b.n	8001f72 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f70:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2202      	movs	r2, #2
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d100      	bne.n	8001f7e <HAL_RCC_OscConfig+0x13e>
 8001f7c:	e099      	b.n	80020b2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	2220      	movs	r2, #32
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d009      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001f8c:	4b7a      	ldr	r3, [pc, #488]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b79      	ldr	r3, [pc, #484]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001f92:	2120      	movs	r1, #32
 8001f94:	430a      	orrs	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	4393      	bics	r3, r2
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d005      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	2b0c      	cmp	r3, #12
 8001faa:	d13e      	bne.n	800202a <HAL_RCC_OscConfig+0x1ea>
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d13b      	bne.n	800202a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001fb2:	4b71      	ldr	r3, [pc, #452]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d004      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x186>
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e2b2      	b.n	800252c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc6:	4b6c      	ldr	r3, [pc, #432]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4a6e      	ldr	r2, [pc, #440]	; (8002184 <HAL_RCC_OscConfig+0x344>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	021a      	lsls	r2, r3, #8
 8001fd6:	4b68      	ldr	r3, [pc, #416]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001fdc:	4b66      	ldr	r3, [pc, #408]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2209      	movs	r2, #9
 8001fe2:	4393      	bics	r3, r2
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	4b64      	ldr	r3, [pc, #400]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fea:	430a      	orrs	r2, r1
 8001fec:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fee:	f000 fbeb 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8001ff2:	0001      	movs	r1, r0
 8001ff4:	4b60      	ldr	r3, [pc, #384]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	220f      	movs	r2, #15
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	4a62      	ldr	r2, [pc, #392]	; (8002188 <HAL_RCC_OscConfig+0x348>)
 8002000:	5cd3      	ldrb	r3, [r2, r3]
 8002002:	000a      	movs	r2, r1
 8002004:	40da      	lsrs	r2, r3
 8002006:	4b61      	ldr	r3, [pc, #388]	; (800218c <HAL_RCC_OscConfig+0x34c>)
 8002008:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800200a:	4b61      	ldr	r3, [pc, #388]	; (8002190 <HAL_RCC_OscConfig+0x350>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2513      	movs	r5, #19
 8002010:	197c      	adds	r4, r7, r5
 8002012:	0018      	movs	r0, r3
 8002014:	f7ff f8b6 	bl	8001184 <HAL_InitTick>
 8002018:	0003      	movs	r3, r0
 800201a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800201c:	197b      	adds	r3, r7, r5
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d046      	beq.n	80020b2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002024:	197b      	adds	r3, r7, r5
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	e280      	b.n	800252c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	2b00      	cmp	r3, #0
 800202e:	d027      	beq.n	8002080 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002030:	4b51      	ldr	r3, [pc, #324]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2209      	movs	r2, #9
 8002036:	4393      	bics	r3, r2
 8002038:	0019      	movs	r1, r3
 800203a:	4b4f      	ldr	r3, [pc, #316]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 800203c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203e:	430a      	orrs	r2, r1
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7ff f8e5 	bl	8001210 <HAL_GetTick>
 8002046:	0003      	movs	r3, r0
 8002048:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800204c:	f7ff f8e0 	bl	8001210 <HAL_GetTick>
 8002050:	0002      	movs	r2, r0
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e266      	b.n	800252c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800205e:	4b46      	ldr	r3, [pc, #280]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2204      	movs	r2, #4
 8002064:	4013      	ands	r3, r2
 8002066:	d0f1      	beq.n	800204c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002068:	4b43      	ldr	r3, [pc, #268]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a45      	ldr	r2, [pc, #276]	; (8002184 <HAL_RCC_OscConfig+0x344>)
 800206e:	4013      	ands	r3, r2
 8002070:	0019      	movs	r1, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	021a      	lsls	r2, r3, #8
 8002078:	4b3f      	ldr	r3, [pc, #252]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 800207a:	430a      	orrs	r2, r1
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	e018      	b.n	80020b2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002080:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b3c      	ldr	r3, [pc, #240]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8002086:	2101      	movs	r1, #1
 8002088:	438a      	bics	r2, r1
 800208a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7ff f8c0 	bl	8001210 <HAL_GetTick>
 8002090:	0003      	movs	r3, r0
 8002092:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002096:	f7ff f8bb 	bl	8001210 <HAL_GetTick>
 800209a:	0002      	movs	r2, r0
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e241      	b.n	800252c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020a8:	4b33      	ldr	r3, [pc, #204]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2204      	movs	r2, #4
 80020ae:	4013      	ands	r3, r2
 80020b0:	d1f1      	bne.n	8002096 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2210      	movs	r2, #16
 80020b8:	4013      	ands	r3, r2
 80020ba:	d100      	bne.n	80020be <HAL_RCC_OscConfig+0x27e>
 80020bc:	e0a1      	b.n	8002202 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d140      	bne.n	8002146 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020c4:	4b2c      	ldr	r3, [pc, #176]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4013      	ands	r3, r2
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_OscConfig+0x29c>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e227      	b.n	800252c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020dc:	4b26      	ldr	r3, [pc, #152]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4a2c      	ldr	r2, [pc, #176]	; (8002194 <HAL_RCC_OscConfig+0x354>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	0019      	movs	r1, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1a      	ldr	r2, [r3, #32]
 80020ea:	4b23      	ldr	r3, [pc, #140]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 80020ec:	430a      	orrs	r2, r1
 80020ee:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020f0:	4b21      	ldr	r3, [pc, #132]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	0a19      	lsrs	r1, r3, #8
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	061a      	lsls	r2, r3, #24
 80020fe:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8002100:	430a      	orrs	r2, r1
 8002102:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	0b5b      	lsrs	r3, r3, #13
 800210a:	3301      	adds	r3, #1
 800210c:	2280      	movs	r2, #128	; 0x80
 800210e:	0212      	lsls	r2, r2, #8
 8002110:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002112:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	091b      	lsrs	r3, r3, #4
 8002118:	210f      	movs	r1, #15
 800211a:	400b      	ands	r3, r1
 800211c:	491a      	ldr	r1, [pc, #104]	; (8002188 <HAL_RCC_OscConfig+0x348>)
 800211e:	5ccb      	ldrb	r3, [r1, r3]
 8002120:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002122:	4b1a      	ldr	r3, [pc, #104]	; (800218c <HAL_RCC_OscConfig+0x34c>)
 8002124:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002126:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <HAL_RCC_OscConfig+0x350>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2513      	movs	r5, #19
 800212c:	197c      	adds	r4, r7, r5
 800212e:	0018      	movs	r0, r3
 8002130:	f7ff f828 	bl	8001184 <HAL_InitTick>
 8002134:	0003      	movs	r3, r0
 8002136:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002138:	197b      	adds	r3, r7, r5
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d060      	beq.n	8002202 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002140:	197b      	adds	r3, r7, r5
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	e1f2      	b.n	800252c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d03f      	beq.n	80021ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	4b09      	ldr	r3, [pc, #36]	; (8002178 <HAL_RCC_OscConfig+0x338>)
 8002154:	2180      	movs	r1, #128	; 0x80
 8002156:	0049      	lsls	r1, r1, #1
 8002158:	430a      	orrs	r2, r1
 800215a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7ff f858 	bl	8001210 <HAL_GetTick>
 8002160:	0003      	movs	r3, r0
 8002162:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002164:	e018      	b.n	8002198 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002166:	f7ff f853 	bl	8001210 <HAL_GetTick>
 800216a:	0002      	movs	r2, r0
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d911      	bls.n	8002198 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e1d9      	b.n	800252c <HAL_RCC_OscConfig+0x6ec>
 8002178:	40021000 	.word	0x40021000
 800217c:	fffeffff 	.word	0xfffeffff
 8002180:	fffbffff 	.word	0xfffbffff
 8002184:	ffffe0ff 	.word	0xffffe0ff
 8002188:	08003998 	.word	0x08003998
 800218c:	20000008 	.word	0x20000008
 8002190:	2000000c 	.word	0x2000000c
 8002194:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002198:	4bc9      	ldr	r3, [pc, #804]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4013      	ands	r3, r2
 80021a2:	d0e0      	beq.n	8002166 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021a4:	4bc6      	ldr	r3, [pc, #792]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4ac6      	ldr	r2, [pc, #792]	; (80024c4 <HAL_RCC_OscConfig+0x684>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	0019      	movs	r1, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1a      	ldr	r2, [r3, #32]
 80021b2:	4bc3      	ldr	r3, [pc, #780]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 80021b4:	430a      	orrs	r2, r1
 80021b6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021b8:	4bc1      	ldr	r3, [pc, #772]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	0a19      	lsrs	r1, r3, #8
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	061a      	lsls	r2, r3, #24
 80021c6:	4bbe      	ldr	r3, [pc, #760]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 80021c8:	430a      	orrs	r2, r1
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	e019      	b.n	8002202 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021ce:	4bbc      	ldr	r3, [pc, #752]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4bbb      	ldr	r3, [pc, #748]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 80021d4:	49bc      	ldr	r1, [pc, #752]	; (80024c8 <HAL_RCC_OscConfig+0x688>)
 80021d6:	400a      	ands	r2, r1
 80021d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021da:	f7ff f819 	bl	8001210 <HAL_GetTick>
 80021de:	0003      	movs	r3, r0
 80021e0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021e4:	f7ff f814 	bl	8001210 <HAL_GetTick>
 80021e8:	0002      	movs	r2, r0
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e19a      	b.n	800252c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80021f6:	4bb2      	ldr	r3, [pc, #712]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4013      	ands	r3, r2
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2208      	movs	r2, #8
 8002208:	4013      	ands	r3, r2
 800220a:	d036      	beq.n	800227a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d019      	beq.n	8002248 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002214:	4baa      	ldr	r3, [pc, #680]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 8002216:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002218:	4ba9      	ldr	r3, [pc, #676]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 800221a:	2101      	movs	r1, #1
 800221c:	430a      	orrs	r2, r1
 800221e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002220:	f7fe fff6 	bl	8001210 <HAL_GetTick>
 8002224:	0003      	movs	r3, r0
 8002226:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800222a:	f7fe fff1 	bl	8001210 <HAL_GetTick>
 800222e:	0002      	movs	r2, r0
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e177      	b.n	800252c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800223c:	4ba0      	ldr	r3, [pc, #640]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 800223e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002240:	2202      	movs	r2, #2
 8002242:	4013      	ands	r3, r2
 8002244:	d0f1      	beq.n	800222a <HAL_RCC_OscConfig+0x3ea>
 8002246:	e018      	b.n	800227a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002248:	4b9d      	ldr	r3, [pc, #628]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 800224a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800224c:	4b9c      	ldr	r3, [pc, #624]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 800224e:	2101      	movs	r1, #1
 8002250:	438a      	bics	r2, r1
 8002252:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002254:	f7fe ffdc 	bl	8001210 <HAL_GetTick>
 8002258:	0003      	movs	r3, r0
 800225a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800225e:	f7fe ffd7 	bl	8001210 <HAL_GetTick>
 8002262:	0002      	movs	r2, r0
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e15d      	b.n	800252c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002270:	4b93      	ldr	r3, [pc, #588]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 8002272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002274:	2202      	movs	r2, #2
 8002276:	4013      	ands	r3, r2
 8002278:	d1f1      	bne.n	800225e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2204      	movs	r2, #4
 8002280:	4013      	ands	r3, r2
 8002282:	d100      	bne.n	8002286 <HAL_RCC_OscConfig+0x446>
 8002284:	e0ae      	b.n	80023e4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002286:	2023      	movs	r0, #35	; 0x23
 8002288:	183b      	adds	r3, r7, r0
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228e:	4b8c      	ldr	r3, [pc, #560]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 8002290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	055b      	lsls	r3, r3, #21
 8002296:	4013      	ands	r3, r2
 8002298:	d109      	bne.n	80022ae <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229a:	4b89      	ldr	r3, [pc, #548]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 800229c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800229e:	4b88      	ldr	r3, [pc, #544]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 80022a0:	2180      	movs	r1, #128	; 0x80
 80022a2:	0549      	lsls	r1, r1, #21
 80022a4:	430a      	orrs	r2, r1
 80022a6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80022a8:	183b      	adds	r3, r7, r0
 80022aa:	2201      	movs	r2, #1
 80022ac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	4b87      	ldr	r3, [pc, #540]	; (80024cc <HAL_RCC_OscConfig+0x68c>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4013      	ands	r3, r2
 80022b8:	d11a      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ba:	4b84      	ldr	r3, [pc, #528]	; (80024cc <HAL_RCC_OscConfig+0x68c>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	4b83      	ldr	r3, [pc, #524]	; (80024cc <HAL_RCC_OscConfig+0x68c>)
 80022c0:	2180      	movs	r1, #128	; 0x80
 80022c2:	0049      	lsls	r1, r1, #1
 80022c4:	430a      	orrs	r2, r1
 80022c6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c8:	f7fe ffa2 	bl	8001210 <HAL_GetTick>
 80022cc:	0003      	movs	r3, r0
 80022ce:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d2:	f7fe ff9d 	bl	8001210 <HAL_GetTick>
 80022d6:	0002      	movs	r2, r0
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b64      	cmp	r3, #100	; 0x64
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e123      	b.n	800252c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e4:	4b79      	ldr	r3, [pc, #484]	; (80024cc <HAL_RCC_OscConfig+0x68c>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	4013      	ands	r3, r2
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d107      	bne.n	800230c <HAL_RCC_OscConfig+0x4cc>
 80022fc:	4b70      	ldr	r3, [pc, #448]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 80022fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002300:	4b6f      	ldr	r3, [pc, #444]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 8002302:	2180      	movs	r1, #128	; 0x80
 8002304:	0049      	lsls	r1, r1, #1
 8002306:	430a      	orrs	r2, r1
 8002308:	651a      	str	r2, [r3, #80]	; 0x50
 800230a:	e031      	b.n	8002370 <HAL_RCC_OscConfig+0x530>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10c      	bne.n	800232e <HAL_RCC_OscConfig+0x4ee>
 8002314:	4b6a      	ldr	r3, [pc, #424]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 8002316:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002318:	4b69      	ldr	r3, [pc, #420]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 800231a:	496b      	ldr	r1, [pc, #428]	; (80024c8 <HAL_RCC_OscConfig+0x688>)
 800231c:	400a      	ands	r2, r1
 800231e:	651a      	str	r2, [r3, #80]	; 0x50
 8002320:	4b67      	ldr	r3, [pc, #412]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 8002322:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002324:	4b66      	ldr	r3, [pc, #408]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 8002326:	496a      	ldr	r1, [pc, #424]	; (80024d0 <HAL_RCC_OscConfig+0x690>)
 8002328:	400a      	ands	r2, r1
 800232a:	651a      	str	r2, [r3, #80]	; 0x50
 800232c:	e020      	b.n	8002370 <HAL_RCC_OscConfig+0x530>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	23a0      	movs	r3, #160	; 0xa0
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	429a      	cmp	r2, r3
 8002338:	d10e      	bne.n	8002358 <HAL_RCC_OscConfig+0x518>
 800233a:	4b61      	ldr	r3, [pc, #388]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 800233c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800233e:	4b60      	ldr	r3, [pc, #384]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 8002340:	2180      	movs	r1, #128	; 0x80
 8002342:	00c9      	lsls	r1, r1, #3
 8002344:	430a      	orrs	r2, r1
 8002346:	651a      	str	r2, [r3, #80]	; 0x50
 8002348:	4b5d      	ldr	r3, [pc, #372]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 800234a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800234c:	4b5c      	ldr	r3, [pc, #368]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 800234e:	2180      	movs	r1, #128	; 0x80
 8002350:	0049      	lsls	r1, r1, #1
 8002352:	430a      	orrs	r2, r1
 8002354:	651a      	str	r2, [r3, #80]	; 0x50
 8002356:	e00b      	b.n	8002370 <HAL_RCC_OscConfig+0x530>
 8002358:	4b59      	ldr	r3, [pc, #356]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 800235a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800235c:	4b58      	ldr	r3, [pc, #352]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 800235e:	495a      	ldr	r1, [pc, #360]	; (80024c8 <HAL_RCC_OscConfig+0x688>)
 8002360:	400a      	ands	r2, r1
 8002362:	651a      	str	r2, [r3, #80]	; 0x50
 8002364:	4b56      	ldr	r3, [pc, #344]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 8002366:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002368:	4b55      	ldr	r3, [pc, #340]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 800236a:	4959      	ldr	r1, [pc, #356]	; (80024d0 <HAL_RCC_OscConfig+0x690>)
 800236c:	400a      	ands	r2, r1
 800236e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d015      	beq.n	80023a4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002378:	f7fe ff4a 	bl	8001210 <HAL_GetTick>
 800237c:	0003      	movs	r3, r0
 800237e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002380:	e009      	b.n	8002396 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002382:	f7fe ff45 	bl	8001210 <HAL_GetTick>
 8002386:	0002      	movs	r2, r0
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	4a51      	ldr	r2, [pc, #324]	; (80024d4 <HAL_RCC_OscConfig+0x694>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e0ca      	b.n	800252c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002396:	4b4a      	ldr	r3, [pc, #296]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 8002398:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4013      	ands	r3, r2
 80023a0:	d0ef      	beq.n	8002382 <HAL_RCC_OscConfig+0x542>
 80023a2:	e014      	b.n	80023ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a4:	f7fe ff34 	bl	8001210 <HAL_GetTick>
 80023a8:	0003      	movs	r3, r0
 80023aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023ac:	e009      	b.n	80023c2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7fe ff2f 	bl	8001210 <HAL_GetTick>
 80023b2:	0002      	movs	r2, r0
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	4a46      	ldr	r2, [pc, #280]	; (80024d4 <HAL_RCC_OscConfig+0x694>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e0b4      	b.n	800252c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023c2:	4b3f      	ldr	r3, [pc, #252]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 80023c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4013      	ands	r3, r2
 80023cc:	d1ef      	bne.n	80023ae <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023ce:	2323      	movs	r3, #35	; 0x23
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d105      	bne.n	80023e4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d8:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 80023da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023dc:	4b38      	ldr	r3, [pc, #224]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 80023de:	493e      	ldr	r1, [pc, #248]	; (80024d8 <HAL_RCC_OscConfig+0x698>)
 80023e0:	400a      	ands	r2, r1
 80023e2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d100      	bne.n	80023ee <HAL_RCC_OscConfig+0x5ae>
 80023ec:	e09d      	b.n	800252a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	2b0c      	cmp	r3, #12
 80023f2:	d100      	bne.n	80023f6 <HAL_RCC_OscConfig+0x5b6>
 80023f4:	e076      	b.n	80024e4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d145      	bne.n	800248a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fe:	4b30      	ldr	r3, [pc, #192]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	4b2f      	ldr	r3, [pc, #188]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 8002404:	4935      	ldr	r1, [pc, #212]	; (80024dc <HAL_RCC_OscConfig+0x69c>)
 8002406:	400a      	ands	r2, r1
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7fe ff01 	bl	8001210 <HAL_GetTick>
 800240e:	0003      	movs	r3, r0
 8002410:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002414:	f7fe fefc 	bl	8001210 <HAL_GetTick>
 8002418:	0002      	movs	r2, r0
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e082      	b.n	800252c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002426:	4b26      	ldr	r3, [pc, #152]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	049b      	lsls	r3, r3, #18
 800242e:	4013      	ands	r3, r2
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002432:	4b23      	ldr	r3, [pc, #140]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	4a2a      	ldr	r2, [pc, #168]	; (80024e0 <HAL_RCC_OscConfig+0x6a0>)
 8002438:	4013      	ands	r3, r2
 800243a:	0019      	movs	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	431a      	orrs	r2, r3
 800244c:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 800244e:	430a      	orrs	r2, r1
 8002450:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002452:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 8002458:	2180      	movs	r1, #128	; 0x80
 800245a:	0449      	lsls	r1, r1, #17
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7fe fed6 	bl	8001210 <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246a:	f7fe fed1 	bl	8001210 <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e057      	b.n	800252c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800247c:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	049b      	lsls	r3, r3, #18
 8002484:	4013      	ands	r3, r2
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x62a>
 8002488:	e04f      	b.n	800252a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248a:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 8002490:	4912      	ldr	r1, [pc, #72]	; (80024dc <HAL_RCC_OscConfig+0x69c>)
 8002492:	400a      	ands	r2, r1
 8002494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002496:	f7fe febb 	bl	8001210 <HAL_GetTick>
 800249a:	0003      	movs	r3, r0
 800249c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a0:	f7fe feb6 	bl	8001210 <HAL_GetTick>
 80024a4:	0002      	movs	r2, r0
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e03c      	b.n	800252c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024b2:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <HAL_RCC_OscConfig+0x680>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	049b      	lsls	r3, r3, #18
 80024ba:	4013      	ands	r3, r2
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x660>
 80024be:	e034      	b.n	800252a <HAL_RCC_OscConfig+0x6ea>
 80024c0:	40021000 	.word	0x40021000
 80024c4:	ffff1fff 	.word	0xffff1fff
 80024c8:	fffffeff 	.word	0xfffffeff
 80024cc:	40007000 	.word	0x40007000
 80024d0:	fffffbff 	.word	0xfffffbff
 80024d4:	00001388 	.word	0x00001388
 80024d8:	efffffff 	.word	0xefffffff
 80024dc:	feffffff 	.word	0xfeffffff
 80024e0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e01d      	b.n	800252c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024f0:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_RCC_OscConfig+0x6f4>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	2380      	movs	r3, #128	; 0x80
 80024fa:	025b      	lsls	r3, r3, #9
 80024fc:	401a      	ands	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002502:	429a      	cmp	r2, r3
 8002504:	d10f      	bne.n	8002526 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	23f0      	movs	r3, #240	; 0xf0
 800250a:	039b      	lsls	r3, r3, #14
 800250c:	401a      	ands	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d107      	bne.n	8002526 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	23c0      	movs	r3, #192	; 0xc0
 800251a:	041b      	lsls	r3, r3, #16
 800251c:	401a      	ands	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002522:	429a      	cmp	r2, r3
 8002524:	d001      	beq.n	800252a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	0018      	movs	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	b00a      	add	sp, #40	; 0x28
 8002532:	bdb0      	pop	{r4, r5, r7, pc}
 8002534:	40021000 	.word	0x40021000

08002538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002538:	b5b0      	push	{r4, r5, r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e128      	b.n	800279e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800254c:	4b96      	ldr	r3, [pc, #600]	; (80027a8 <HAL_RCC_ClockConfig+0x270>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2201      	movs	r2, #1
 8002552:	4013      	ands	r3, r2
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d91e      	bls.n	8002598 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b93      	ldr	r3, [pc, #588]	; (80027a8 <HAL_RCC_ClockConfig+0x270>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2201      	movs	r2, #1
 8002560:	4393      	bics	r3, r2
 8002562:	0019      	movs	r1, r3
 8002564:	4b90      	ldr	r3, [pc, #576]	; (80027a8 <HAL_RCC_ClockConfig+0x270>)
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800256c:	f7fe fe50 	bl	8001210 <HAL_GetTick>
 8002570:	0003      	movs	r3, r0
 8002572:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002574:	e009      	b.n	800258a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002576:	f7fe fe4b 	bl	8001210 <HAL_GetTick>
 800257a:	0002      	movs	r2, r0
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	4a8a      	ldr	r2, [pc, #552]	; (80027ac <HAL_RCC_ClockConfig+0x274>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d901      	bls.n	800258a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e109      	b.n	800279e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b87      	ldr	r3, [pc, #540]	; (80027a8 <HAL_RCC_ClockConfig+0x270>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2201      	movs	r2, #1
 8002590:	4013      	ands	r3, r2
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d1ee      	bne.n	8002576 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2202      	movs	r2, #2
 800259e:	4013      	ands	r3, r2
 80025a0:	d009      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a2:	4b83      	ldr	r3, [pc, #524]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	22f0      	movs	r2, #240	; 0xf0
 80025a8:	4393      	bics	r3, r2
 80025aa:	0019      	movs	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	4b7f      	ldr	r3, [pc, #508]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 80025b2:	430a      	orrs	r2, r1
 80025b4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2201      	movs	r2, #1
 80025bc:	4013      	ands	r3, r2
 80025be:	d100      	bne.n	80025c2 <HAL_RCC_ClockConfig+0x8a>
 80025c0:	e089      	b.n	80026d6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025ca:	4b79      	ldr	r3, [pc, #484]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	029b      	lsls	r3, r3, #10
 80025d2:	4013      	ands	r3, r2
 80025d4:	d120      	bne.n	8002618 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e0e1      	b.n	800279e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d107      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025e2:	4b73      	ldr	r3, [pc, #460]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	049b      	lsls	r3, r3, #18
 80025ea:	4013      	ands	r3, r2
 80025ec:	d114      	bne.n	8002618 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e0d5      	b.n	800279e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d106      	bne.n	8002608 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025fa:	4b6d      	ldr	r3, [pc, #436]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2204      	movs	r2, #4
 8002600:	4013      	ands	r3, r2
 8002602:	d109      	bne.n	8002618 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0ca      	b.n	800279e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002608:	4b69      	ldr	r3, [pc, #420]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4013      	ands	r3, r2
 8002612:	d101      	bne.n	8002618 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0c2      	b.n	800279e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002618:	4b65      	ldr	r3, [pc, #404]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2203      	movs	r2, #3
 800261e:	4393      	bics	r3, r2
 8002620:	0019      	movs	r1, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	4b62      	ldr	r3, [pc, #392]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 8002628:	430a      	orrs	r2, r1
 800262a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800262c:	f7fe fdf0 	bl	8001210 <HAL_GetTick>
 8002630:	0003      	movs	r3, r0
 8002632:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b02      	cmp	r3, #2
 800263a:	d111      	bne.n	8002660 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800263c:	e009      	b.n	8002652 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263e:	f7fe fde7 	bl	8001210 <HAL_GetTick>
 8002642:	0002      	movs	r2, r0
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	4a58      	ldr	r2, [pc, #352]	; (80027ac <HAL_RCC_ClockConfig+0x274>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e0a5      	b.n	800279e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002652:	4b57      	ldr	r3, [pc, #348]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	220c      	movs	r2, #12
 8002658:	4013      	ands	r3, r2
 800265a:	2b08      	cmp	r3, #8
 800265c:	d1ef      	bne.n	800263e <HAL_RCC_ClockConfig+0x106>
 800265e:	e03a      	b.n	80026d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b03      	cmp	r3, #3
 8002666:	d111      	bne.n	800268c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002668:	e009      	b.n	800267e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800266a:	f7fe fdd1 	bl	8001210 <HAL_GetTick>
 800266e:	0002      	movs	r2, r0
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	4a4d      	ldr	r2, [pc, #308]	; (80027ac <HAL_RCC_ClockConfig+0x274>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e08f      	b.n	800279e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800267e:	4b4c      	ldr	r3, [pc, #304]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	220c      	movs	r2, #12
 8002684:	4013      	ands	r3, r2
 8002686:	2b0c      	cmp	r3, #12
 8002688:	d1ef      	bne.n	800266a <HAL_RCC_ClockConfig+0x132>
 800268a:	e024      	b.n	80026d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d11b      	bne.n	80026cc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002694:	e009      	b.n	80026aa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002696:	f7fe fdbb 	bl	8001210 <HAL_GetTick>
 800269a:	0002      	movs	r2, r0
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	4a42      	ldr	r2, [pc, #264]	; (80027ac <HAL_RCC_ClockConfig+0x274>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e079      	b.n	800279e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026aa:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	220c      	movs	r2, #12
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d1ef      	bne.n	8002696 <HAL_RCC_ClockConfig+0x15e>
 80026b6:	e00e      	b.n	80026d6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b8:	f7fe fdaa 	bl	8001210 <HAL_GetTick>
 80026bc:	0002      	movs	r2, r0
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	4a3a      	ldr	r2, [pc, #232]	; (80027ac <HAL_RCC_ClockConfig+0x274>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e068      	b.n	800279e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80026cc:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	220c      	movs	r2, #12
 80026d2:	4013      	ands	r3, r2
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026d6:	4b34      	ldr	r3, [pc, #208]	; (80027a8 <HAL_RCC_ClockConfig+0x270>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2201      	movs	r2, #1
 80026dc:	4013      	ands	r3, r2
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d21e      	bcs.n	8002722 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e4:	4b30      	ldr	r3, [pc, #192]	; (80027a8 <HAL_RCC_ClockConfig+0x270>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2201      	movs	r2, #1
 80026ea:	4393      	bics	r3, r2
 80026ec:	0019      	movs	r1, r3
 80026ee:	4b2e      	ldr	r3, [pc, #184]	; (80027a8 <HAL_RCC_ClockConfig+0x270>)
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026f6:	f7fe fd8b 	bl	8001210 <HAL_GetTick>
 80026fa:	0003      	movs	r3, r0
 80026fc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	e009      	b.n	8002714 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002700:	f7fe fd86 	bl	8001210 <HAL_GetTick>
 8002704:	0002      	movs	r2, r0
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	4a28      	ldr	r2, [pc, #160]	; (80027ac <HAL_RCC_ClockConfig+0x274>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e044      	b.n	800279e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002714:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <HAL_RCC_ClockConfig+0x270>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2201      	movs	r2, #1
 800271a:	4013      	ands	r3, r2
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d1ee      	bne.n	8002700 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2204      	movs	r2, #4
 8002728:	4013      	ands	r3, r2
 800272a:	d009      	beq.n	8002740 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800272c:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4a20      	ldr	r2, [pc, #128]	; (80027b4 <HAL_RCC_ClockConfig+0x27c>)
 8002732:	4013      	ands	r3, r2
 8002734:	0019      	movs	r1, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 800273c:	430a      	orrs	r2, r1
 800273e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2208      	movs	r2, #8
 8002746:	4013      	ands	r3, r2
 8002748:	d00a      	beq.n	8002760 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800274a:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	4a1a      	ldr	r2, [pc, #104]	; (80027b8 <HAL_RCC_ClockConfig+0x280>)
 8002750:	4013      	ands	r3, r2
 8002752:	0019      	movs	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	00da      	lsls	r2, r3, #3
 800275a:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 800275c:	430a      	orrs	r2, r1
 800275e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002760:	f000 f832 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8002764:	0001      	movs	r1, r0
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_RCC_ClockConfig+0x278>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	091b      	lsrs	r3, r3, #4
 800276c:	220f      	movs	r2, #15
 800276e:	4013      	ands	r3, r2
 8002770:	4a12      	ldr	r2, [pc, #72]	; (80027bc <HAL_RCC_ClockConfig+0x284>)
 8002772:	5cd3      	ldrb	r3, [r2, r3]
 8002774:	000a      	movs	r2, r1
 8002776:	40da      	lsrs	r2, r3
 8002778:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_RCC_ClockConfig+0x288>)
 800277a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <HAL_RCC_ClockConfig+0x28c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	250b      	movs	r5, #11
 8002782:	197c      	adds	r4, r7, r5
 8002784:	0018      	movs	r0, r3
 8002786:	f7fe fcfd 	bl	8001184 <HAL_InitTick>
 800278a:	0003      	movs	r3, r0
 800278c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800278e:	197b      	adds	r3, r7, r5
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002796:	197b      	adds	r3, r7, r5
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	e000      	b.n	800279e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	0018      	movs	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b004      	add	sp, #16
 80027a4:	bdb0      	pop	{r4, r5, r7, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	40022000 	.word	0x40022000
 80027ac:	00001388 	.word	0x00001388
 80027b0:	40021000 	.word	0x40021000
 80027b4:	fffff8ff 	.word	0xfffff8ff
 80027b8:	ffffc7ff 	.word	0xffffc7ff
 80027bc:	08003998 	.word	0x08003998
 80027c0:	20000008 	.word	0x20000008
 80027c4:	2000000c 	.word	0x2000000c

080027c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c8:	b5b0      	push	{r4, r5, r7, lr}
 80027ca:	b08e      	sub	sp, #56	; 0x38
 80027cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80027ce:	4b4c      	ldr	r3, [pc, #304]	; (8002900 <HAL_RCC_GetSysClockFreq+0x138>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d6:	230c      	movs	r3, #12
 80027d8:	4013      	ands	r3, r2
 80027da:	2b0c      	cmp	r3, #12
 80027dc:	d014      	beq.n	8002808 <HAL_RCC_GetSysClockFreq+0x40>
 80027de:	d900      	bls.n	80027e2 <HAL_RCC_GetSysClockFreq+0x1a>
 80027e0:	e07b      	b.n	80028da <HAL_RCC_GetSysClockFreq+0x112>
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d002      	beq.n	80027ec <HAL_RCC_GetSysClockFreq+0x24>
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d00b      	beq.n	8002802 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ea:	e076      	b.n	80028da <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80027ec:	4b44      	ldr	r3, [pc, #272]	; (8002900 <HAL_RCC_GetSysClockFreq+0x138>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2210      	movs	r2, #16
 80027f2:	4013      	ands	r3, r2
 80027f4:	d002      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80027f6:	4b43      	ldr	r3, [pc, #268]	; (8002904 <HAL_RCC_GetSysClockFreq+0x13c>)
 80027f8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80027fa:	e07c      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80027fc:	4b42      	ldr	r3, [pc, #264]	; (8002908 <HAL_RCC_GetSysClockFreq+0x140>)
 80027fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002800:	e079      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002802:	4b42      	ldr	r3, [pc, #264]	; (800290c <HAL_RCC_GetSysClockFreq+0x144>)
 8002804:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002806:	e076      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280a:	0c9a      	lsrs	r2, r3, #18
 800280c:	230f      	movs	r3, #15
 800280e:	401a      	ands	r2, r3
 8002810:	4b3f      	ldr	r3, [pc, #252]	; (8002910 <HAL_RCC_GetSysClockFreq+0x148>)
 8002812:	5c9b      	ldrb	r3, [r3, r2]
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002818:	0d9a      	lsrs	r2, r3, #22
 800281a:	2303      	movs	r3, #3
 800281c:	4013      	ands	r3, r2
 800281e:	3301      	adds	r3, #1
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002822:	4b37      	ldr	r3, [pc, #220]	; (8002900 <HAL_RCC_GetSysClockFreq+0x138>)
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	2380      	movs	r3, #128	; 0x80
 8002828:	025b      	lsls	r3, r3, #9
 800282a:	4013      	ands	r3, r2
 800282c:	d01a      	beq.n	8002864 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	4a35      	ldr	r2, [pc, #212]	; (800290c <HAL_RCC_GetSysClockFreq+0x144>)
 8002838:	2300      	movs	r3, #0
 800283a:	69b8      	ldr	r0, [r7, #24]
 800283c:	69f9      	ldr	r1, [r7, #28]
 800283e:	f7fd fd0f 	bl	8000260 <__aeabi_lmul>
 8002842:	0002      	movs	r2, r0
 8002844:	000b      	movs	r3, r1
 8002846:	0010      	movs	r0, r2
 8002848:	0019      	movs	r1, r3
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f7fd fce3 	bl	8000220 <__aeabi_uldivmod>
 800285a:	0002      	movs	r2, r0
 800285c:	000b      	movs	r3, r1
 800285e:	0013      	movs	r3, r2
 8002860:	637b      	str	r3, [r7, #52]	; 0x34
 8002862:	e037      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002864:	4b26      	ldr	r3, [pc, #152]	; (8002900 <HAL_RCC_GetSysClockFreq+0x138>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2210      	movs	r2, #16
 800286a:	4013      	ands	r3, r2
 800286c:	d01a      	beq.n	80028a4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	4a23      	ldr	r2, [pc, #140]	; (8002904 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002878:	2300      	movs	r3, #0
 800287a:	68b8      	ldr	r0, [r7, #8]
 800287c:	68f9      	ldr	r1, [r7, #12]
 800287e:	f7fd fcef 	bl	8000260 <__aeabi_lmul>
 8002882:	0002      	movs	r2, r0
 8002884:	000b      	movs	r3, r1
 8002886:	0010      	movs	r0, r2
 8002888:	0019      	movs	r1, r3
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	603b      	str	r3, [r7, #0]
 800288e:	2300      	movs	r3, #0
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f7fd fcc3 	bl	8000220 <__aeabi_uldivmod>
 800289a:	0002      	movs	r2, r0
 800289c:	000b      	movs	r3, r1
 800289e:	0013      	movs	r3, r2
 80028a0:	637b      	str	r3, [r7, #52]	; 0x34
 80028a2:	e017      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80028a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a6:	0018      	movs	r0, r3
 80028a8:	2300      	movs	r3, #0
 80028aa:	0019      	movs	r1, r3
 80028ac:	4a16      	ldr	r2, [pc, #88]	; (8002908 <HAL_RCC_GetSysClockFreq+0x140>)
 80028ae:	2300      	movs	r3, #0
 80028b0:	f7fd fcd6 	bl	8000260 <__aeabi_lmul>
 80028b4:	0002      	movs	r2, r0
 80028b6:	000b      	movs	r3, r1
 80028b8:	0010      	movs	r0, r2
 80028ba:	0019      	movs	r1, r3
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	001c      	movs	r4, r3
 80028c0:	2300      	movs	r3, #0
 80028c2:	001d      	movs	r5, r3
 80028c4:	0022      	movs	r2, r4
 80028c6:	002b      	movs	r3, r5
 80028c8:	f7fd fcaa 	bl	8000220 <__aeabi_uldivmod>
 80028cc:	0002      	movs	r2, r0
 80028ce:	000b      	movs	r3, r1
 80028d0:	0013      	movs	r3, r2
 80028d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80028d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028d8:	e00d      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <HAL_RCC_GetSysClockFreq+0x138>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	0b5b      	lsrs	r3, r3, #13
 80028e0:	2207      	movs	r2, #7
 80028e2:	4013      	ands	r3, r2
 80028e4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	3301      	adds	r3, #1
 80028ea:	2280      	movs	r2, #128	; 0x80
 80028ec:	0212      	lsls	r2, r2, #8
 80028ee:	409a      	lsls	r2, r3
 80028f0:	0013      	movs	r3, r2
 80028f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028f4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80028f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80028f8:	0018      	movs	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b00e      	add	sp, #56	; 0x38
 80028fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002900:	40021000 	.word	0x40021000
 8002904:	003d0900 	.word	0x003d0900
 8002908:	00f42400 	.word	0x00f42400
 800290c:	007a1200 	.word	0x007a1200
 8002910:	080039b0 	.word	0x080039b0

08002914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002918:	4b02      	ldr	r3, [pc, #8]	; (8002924 <HAL_RCC_GetHCLKFreq+0x10>)
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	20000008 	.word	0x20000008

08002928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800292c:	f7ff fff2 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 8002930:	0001      	movs	r1, r0
 8002932:	4b06      	ldr	r3, [pc, #24]	; (800294c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	0a1b      	lsrs	r3, r3, #8
 8002938:	2207      	movs	r2, #7
 800293a:	4013      	ands	r3, r2
 800293c:	4a04      	ldr	r2, [pc, #16]	; (8002950 <HAL_RCC_GetPCLK1Freq+0x28>)
 800293e:	5cd3      	ldrb	r3, [r2, r3]
 8002940:	40d9      	lsrs	r1, r3
 8002942:	000b      	movs	r3, r1
}
 8002944:	0018      	movs	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	40021000 	.word	0x40021000
 8002950:	080039a8 	.word	0x080039a8

08002954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002958:	f7ff ffdc 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 800295c:	0001      	movs	r1, r0
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	0adb      	lsrs	r3, r3, #11
 8002964:	2207      	movs	r2, #7
 8002966:	4013      	ands	r3, r2
 8002968:	4a04      	ldr	r2, [pc, #16]	; (800297c <HAL_RCC_GetPCLK2Freq+0x28>)
 800296a:	5cd3      	ldrb	r3, [r2, r3]
 800296c:	40d9      	lsrs	r1, r3
 800296e:	000b      	movs	r3, r1
}
 8002970:	0018      	movs	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	40021000 	.word	0x40021000
 800297c:	080039a8 	.word	0x080039a8

08002980 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002988:	2017      	movs	r0, #23
 800298a:	183b      	adds	r3, r7, r0
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2220      	movs	r2, #32
 8002996:	4013      	ands	r3, r2
 8002998:	d100      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800299a:	e0c2      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299c:	4b81      	ldr	r3, [pc, #516]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800299e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029a0:	2380      	movs	r3, #128	; 0x80
 80029a2:	055b      	lsls	r3, r3, #21
 80029a4:	4013      	ands	r3, r2
 80029a6:	d109      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a8:	4b7e      	ldr	r3, [pc, #504]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ac:	4b7d      	ldr	r3, [pc, #500]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029ae:	2180      	movs	r1, #128	; 0x80
 80029b0:	0549      	lsls	r1, r1, #21
 80029b2:	430a      	orrs	r2, r1
 80029b4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80029b6:	183b      	adds	r3, r7, r0
 80029b8:	2201      	movs	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029bc:	4b7a      	ldr	r3, [pc, #488]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4013      	ands	r3, r2
 80029c6:	d11a      	bne.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029c8:	4b77      	ldr	r3, [pc, #476]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	4b76      	ldr	r3, [pc, #472]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80029ce:	2180      	movs	r1, #128	; 0x80
 80029d0:	0049      	lsls	r1, r1, #1
 80029d2:	430a      	orrs	r2, r1
 80029d4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029d6:	f7fe fc1b 	bl	8001210 <HAL_GetTick>
 80029da:	0003      	movs	r3, r0
 80029dc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029de:	e008      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e0:	f7fe fc16 	bl	8001210 <HAL_GetTick>
 80029e4:	0002      	movs	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b64      	cmp	r3, #100	; 0x64
 80029ec:	d901      	bls.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e0d4      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f2:	4b6d      	ldr	r3, [pc, #436]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4013      	ands	r3, r2
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80029fe:	4b69      	ldr	r3, [pc, #420]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	23c0      	movs	r3, #192	; 0xc0
 8002a04:	039b      	lsls	r3, r3, #14
 8002a06:	4013      	ands	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	23c0      	movs	r3, #192	; 0xc0
 8002a10:	039b      	lsls	r3, r3, #14
 8002a12:	4013      	ands	r3, r2
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d013      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	23c0      	movs	r3, #192	; 0xc0
 8002a20:	029b      	lsls	r3, r3, #10
 8002a22:	401a      	ands	r2, r3
 8002a24:	23c0      	movs	r3, #192	; 0xc0
 8002a26:	029b      	lsls	r3, r3, #10
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d10a      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a2c:	4b5d      	ldr	r3, [pc, #372]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	2380      	movs	r3, #128	; 0x80
 8002a32:	029b      	lsls	r3, r3, #10
 8002a34:	401a      	ands	r2, r3
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	029b      	lsls	r3, r3, #10
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e0ac      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002a42:	4b58      	ldr	r3, [pc, #352]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a46:	23c0      	movs	r3, #192	; 0xc0
 8002a48:	029b      	lsls	r3, r3, #10
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d03b      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	23c0      	movs	r3, #192	; 0xc0
 8002a5a:	029b      	lsls	r3, r3, #10
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d033      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d02e      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002a6e:	4b4d      	ldr	r3, [pc, #308]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a72:	4a4e      	ldr	r2, [pc, #312]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a78:	4b4a      	ldr	r3, [pc, #296]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a7c:	4b49      	ldr	r3, [pc, #292]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a7e:	2180      	movs	r1, #128	; 0x80
 8002a80:	0309      	lsls	r1, r1, #12
 8002a82:	430a      	orrs	r2, r1
 8002a84:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a86:	4b47      	ldr	r3, [pc, #284]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a8a:	4b46      	ldr	r3, [pc, #280]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a8c:	4948      	ldr	r1, [pc, #288]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a8e:	400a      	ands	r2, r1
 8002a90:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002a92:	4b44      	ldr	r3, [pc, #272]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d014      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa2:	f7fe fbb5 	bl	8001210 <HAL_GetTick>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aaa:	e009      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aac:	f7fe fbb0 	bl	8001210 <HAL_GetTick>
 8002ab0:	0002      	movs	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	4a3f      	ldr	r2, [pc, #252]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e06d      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ac0:	4b38      	ldr	r3, [pc, #224]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002ac2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ac4:	2380      	movs	r3, #128	; 0x80
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d0ef      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	23c0      	movs	r3, #192	; 0xc0
 8002ad2:	029b      	lsls	r3, r3, #10
 8002ad4:	401a      	ands	r2, r3
 8002ad6:	23c0      	movs	r3, #192	; 0xc0
 8002ad8:	029b      	lsls	r3, r3, #10
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002ade:	4b31      	ldr	r3, [pc, #196]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a35      	ldr	r2, [pc, #212]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	23c0      	movs	r3, #192	; 0xc0
 8002aee:	039b      	lsls	r3, r3, #14
 8002af0:	401a      	ands	r2, r3
 8002af2:	4b2c      	ldr	r3, [pc, #176]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002af4:	430a      	orrs	r2, r1
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	4b2a      	ldr	r3, [pc, #168]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002afa:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	23c0      	movs	r3, #192	; 0xc0
 8002b02:	029b      	lsls	r3, r3, #10
 8002b04:	401a      	ands	r2, r3
 8002b06:	4b27      	ldr	r3, [pc, #156]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b0c:	2317      	movs	r3, #23
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d105      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b16:	4b23      	ldr	r3, [pc, #140]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b1a:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b1c:	4927      	ldr	r1, [pc, #156]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b1e:	400a      	ands	r2, r1
 8002b20:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2202      	movs	r2, #2
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d009      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b30:	220c      	movs	r2, #12
 8002b32:	4393      	bics	r3, r2
 8002b34:	0019      	movs	r1, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2204      	movs	r2, #4
 8002b46:	4013      	ands	r3, r2
 8002b48:	d009      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b4a:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4e:	4a1c      	ldr	r2, [pc, #112]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	0019      	movs	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2208      	movs	r2, #8
 8002b64:	4013      	ands	r3, r2
 8002b66:	d009      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b68:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6c:	4a15      	ldr	r2, [pc, #84]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b6e:	4013      	ands	r3, r2
 8002b70:	0019      	movs	r1, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691a      	ldr	r2, [r3, #16]
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2280      	movs	r2, #128	; 0x80
 8002b82:	4013      	ands	r3, r2
 8002b84:	d009      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002b86:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8a:	4a0f      	ldr	r2, [pc, #60]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	0019      	movs	r1, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	695a      	ldr	r2, [r3, #20]
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b96:	430a      	orrs	r2, r1
 8002b98:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b006      	add	sp, #24
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40007000 	.word	0x40007000
 8002bac:	fffcffff 	.word	0xfffcffff
 8002bb0:	fff7ffff 	.word	0xfff7ffff
 8002bb4:	00001388 	.word	0x00001388
 8002bb8:	ffcfffff 	.word	0xffcfffff
 8002bbc:	efffffff 	.word	0xefffffff
 8002bc0:	fffff3ff 	.word	0xfffff3ff
 8002bc4:	ffffcfff 	.word	0xffffcfff
 8002bc8:	fff3ffff 	.word	0xfff3ffff

08002bcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e044      	b.n	8002c68 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d107      	bne.n	8002bf6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2274      	movs	r2, #116	; 0x74
 8002bea:	2100      	movs	r1, #0
 8002bec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f7fe f97f 	bl	8000ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2224      	movs	r2, #36	; 0x24
 8002bfa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2101      	movs	r1, #1
 8002c08:	438a      	bics	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f000 f94c 	bl	8002eac <UART_SetConfig>
 8002c14:	0003      	movs	r3, r0
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e024      	b.n	8002c68 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f000 fba1 	bl	8003370 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	490d      	ldr	r1, [pc, #52]	; (8002c70 <HAL_UART_Init+0xa4>)
 8002c3a:	400a      	ands	r2, r1
 8002c3c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	212a      	movs	r1, #42	; 0x2a
 8002c4a:	438a      	bics	r2, r1
 8002c4c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2101      	movs	r1, #1
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f000 fc39 	bl	80034d8 <UART_CheckIdleState>
 8002c66:	0003      	movs	r3, r0
}
 8002c68:	0018      	movs	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b002      	add	sp, #8
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	ffffb7ff 	.word	0xffffb7ff

08002c74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	; 0x28
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	1dbb      	adds	r3, r7, #6
 8002c82:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d000      	beq.n	8002c8e <HAL_UART_Transmit+0x1a>
 8002c8c:	e095      	b.n	8002dba <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_UART_Transmit+0x28>
 8002c94:	1dbb      	adds	r3, r7, #6
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e08d      	b.n	8002dbc <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	015b      	lsls	r3, r3, #5
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d109      	bne.n	8002cc0 <HAL_UART_Transmit+0x4c>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d105      	bne.n	8002cc0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d001      	beq.n	8002cc0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e07d      	b.n	8002dbc <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2274      	movs	r2, #116	; 0x74
 8002cc4:	5c9b      	ldrb	r3, [r3, r2]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_UART_Transmit+0x5a>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e076      	b.n	8002dbc <HAL_UART_Transmit+0x148>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2274      	movs	r2, #116	; 0x74
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2280      	movs	r2, #128	; 0x80
 8002cda:	2100      	movs	r1, #0
 8002cdc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2221      	movs	r2, #33	; 0x21
 8002ce2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ce4:	f7fe fa94 	bl	8001210 <HAL_GetTick>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1dba      	adds	r2, r7, #6
 8002cf0:	2150      	movs	r1, #80	; 0x50
 8002cf2:	8812      	ldrh	r2, [r2, #0]
 8002cf4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	1dba      	adds	r2, r7, #6
 8002cfa:	2152      	movs	r1, #82	; 0x52
 8002cfc:	8812      	ldrh	r2, [r2, #0]
 8002cfe:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	015b      	lsls	r3, r3, #5
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d108      	bne.n	8002d1e <HAL_UART_Transmit+0xaa>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d104      	bne.n	8002d1e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	61bb      	str	r3, [r7, #24]
 8002d1c:	e003      	b.n	8002d26 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2274      	movs	r2, #116	; 0x74
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002d2e:	e02c      	b.n	8002d8a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	0013      	movs	r3, r2
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2180      	movs	r1, #128	; 0x80
 8002d3e:	f000 fc13 	bl	8003568 <UART_WaitOnFlagUntilTimeout>
 8002d42:	1e03      	subs	r3, r0, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e038      	b.n	8002dbc <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10b      	bne.n	8002d68 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	001a      	movs	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	05d2      	lsls	r2, r2, #23
 8002d5c:	0dd2      	lsrs	r2, r2, #23
 8002d5e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	3302      	adds	r3, #2
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	e007      	b.n	8002d78 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	781a      	ldrb	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3301      	adds	r3, #1
 8002d76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2252      	movs	r2, #82	; 0x52
 8002d7c:	5a9b      	ldrh	r3, [r3, r2]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b299      	uxth	r1, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2252      	movs	r2, #82	; 0x52
 8002d88:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2252      	movs	r2, #82	; 0x52
 8002d8e:	5a9b      	ldrh	r3, [r3, r2]
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1cc      	bne.n	8002d30 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	0013      	movs	r3, r2
 8002da0:	2200      	movs	r2, #0
 8002da2:	2140      	movs	r1, #64	; 0x40
 8002da4:	f000 fbe0 	bl	8003568 <UART_WaitOnFlagUntilTimeout>
 8002da8:	1e03      	subs	r3, r0, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e005      	b.n	8002dbc <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	e000      	b.n	8002dbc <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002dba:	2302      	movs	r3, #2
  }
}
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b008      	add	sp, #32
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	1dbb      	adds	r3, r7, #6
 8002dd0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d144      	bne.n	8002e64 <HAL_UART_Receive_DMA+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_UART_Receive_DMA+0x24>
 8002de0:	1dbb      	adds	r3, r7, #6
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e03c      	b.n	8002e66 <HAL_UART_Receive_DMA+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	015b      	lsls	r3, r3, #5
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d109      	bne.n	8002e0c <HAL_UART_Receive_DMA+0x48>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d105      	bne.n	8002e0c <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2201      	movs	r2, #1
 8002e04:	4013      	ands	r3, r2
 8002e06:	d001      	beq.n	8002e0c <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e02c      	b.n	8002e66 <HAL_UART_Receive_DMA+0xa2>
      }
    }

    __HAL_LOCK(huart);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2274      	movs	r2, #116	; 0x74
 8002e10:	5c9b      	ldrb	r3, [r3, r2]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_UART_Receive_DMA+0x56>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e025      	b.n	8002e66 <HAL_UART_Receive_DMA+0xa2>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2274      	movs	r2, #116	; 0x74
 8002e1e:	2101      	movs	r1, #1
 8002e20:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a10      	ldr	r2, [pc, #64]	; (8002e70 <HAL_UART_Receive_DMA+0xac>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00f      	beq.n	8002e52 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	041b      	lsls	r3, r3, #16
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d008      	beq.n	8002e52 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2180      	movs	r1, #128	; 0x80
 8002e4c:	04c9      	lsls	r1, r1, #19
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002e52:	1dbb      	adds	r3, r7, #6
 8002e54:	881a      	ldrh	r2, [r3, #0]
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f000 fc02 	bl	8003664 <UART_Start_Receive_DMA>
 8002e60:	0003      	movs	r3, r0
 8002e62:	e000      	b.n	8002e66 <HAL_UART_Receive_DMA+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8002e64:	2302      	movs	r3, #2
  }
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b004      	add	sp, #16
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	40004800 	.word	0x40004800

08002e74 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002e7c:	46c0      	nop			; (mov r8, r8)
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b002      	add	sp, #8
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e8c:	46c0      	nop			; (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b002      	add	sp, #8
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	000a      	movs	r2, r1
 8002e9e:	1cbb      	adds	r3, r7, #2
 8002ea0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b002      	add	sp, #8
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eac:	b5b0      	push	{r4, r5, r7, lr}
 8002eae:	b08e      	sub	sp, #56	; 0x38
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002eb4:	231a      	movs	r3, #26
 8002eb6:	2218      	movs	r2, #24
 8002eb8:	4694      	mov	ip, r2
 8002eba:	44bc      	add	ip, r7
 8002ebc:	4463      	add	r3, ip
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4abc      	ldr	r2, [pc, #752]	; (80031d4 <UART_SetConfig+0x328>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eec:	430a      	orrs	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4ab8      	ldr	r2, [pc, #736]	; (80031d8 <UART_SetConfig+0x32c>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	0019      	movs	r1, r3
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4ab2      	ldr	r2, [pc, #712]	; (80031dc <UART_SetConfig+0x330>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d004      	beq.n	8002f22 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	4aad      	ldr	r2, [pc, #692]	; (80031e0 <UART_SetConfig+0x334>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f34:	430a      	orrs	r2, r1
 8002f36:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4aa9      	ldr	r2, [pc, #676]	; (80031e4 <UART_SetConfig+0x338>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d136      	bne.n	8002fb0 <UART_SetConfig+0x104>
 8002f42:	4ba9      	ldr	r3, [pc, #676]	; (80031e8 <UART_SetConfig+0x33c>)
 8002f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f46:	220c      	movs	r2, #12
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b0c      	cmp	r3, #12
 8002f4c:	d020      	beq.n	8002f90 <UART_SetConfig+0xe4>
 8002f4e:	d827      	bhi.n	8002fa0 <UART_SetConfig+0xf4>
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d00d      	beq.n	8002f70 <UART_SetConfig+0xc4>
 8002f54:	d824      	bhi.n	8002fa0 <UART_SetConfig+0xf4>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0xb4>
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d010      	beq.n	8002f80 <UART_SetConfig+0xd4>
 8002f5e:	e01f      	b.n	8002fa0 <UART_SetConfig+0xf4>
 8002f60:	231b      	movs	r3, #27
 8002f62:	2218      	movs	r2, #24
 8002f64:	4694      	mov	ip, r2
 8002f66:	44bc      	add	ip, r7
 8002f68:	4463      	add	r3, ip
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	e06f      	b.n	8003050 <UART_SetConfig+0x1a4>
 8002f70:	231b      	movs	r3, #27
 8002f72:	2218      	movs	r2, #24
 8002f74:	4694      	mov	ip, r2
 8002f76:	44bc      	add	ip, r7
 8002f78:	4463      	add	r3, ip
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	e067      	b.n	8003050 <UART_SetConfig+0x1a4>
 8002f80:	231b      	movs	r3, #27
 8002f82:	2218      	movs	r2, #24
 8002f84:	4694      	mov	ip, r2
 8002f86:	44bc      	add	ip, r7
 8002f88:	4463      	add	r3, ip
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	701a      	strb	r2, [r3, #0]
 8002f8e:	e05f      	b.n	8003050 <UART_SetConfig+0x1a4>
 8002f90:	231b      	movs	r3, #27
 8002f92:	2218      	movs	r2, #24
 8002f94:	4694      	mov	ip, r2
 8002f96:	44bc      	add	ip, r7
 8002f98:	4463      	add	r3, ip
 8002f9a:	2208      	movs	r2, #8
 8002f9c:	701a      	strb	r2, [r3, #0]
 8002f9e:	e057      	b.n	8003050 <UART_SetConfig+0x1a4>
 8002fa0:	231b      	movs	r3, #27
 8002fa2:	2218      	movs	r2, #24
 8002fa4:	4694      	mov	ip, r2
 8002fa6:	44bc      	add	ip, r7
 8002fa8:	4463      	add	r3, ip
 8002faa:	2210      	movs	r2, #16
 8002fac:	701a      	strb	r2, [r3, #0]
 8002fae:	e04f      	b.n	8003050 <UART_SetConfig+0x1a4>
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a89      	ldr	r2, [pc, #548]	; (80031dc <UART_SetConfig+0x330>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d143      	bne.n	8003042 <UART_SetConfig+0x196>
 8002fba:	4b8b      	ldr	r3, [pc, #556]	; (80031e8 <UART_SetConfig+0x33c>)
 8002fbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fbe:	23c0      	movs	r3, #192	; 0xc0
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	22c0      	movs	r2, #192	; 0xc0
 8002fc6:	0112      	lsls	r2, r2, #4
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d02a      	beq.n	8003022 <UART_SetConfig+0x176>
 8002fcc:	22c0      	movs	r2, #192	; 0xc0
 8002fce:	0112      	lsls	r2, r2, #4
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d82e      	bhi.n	8003032 <UART_SetConfig+0x186>
 8002fd4:	2280      	movs	r2, #128	; 0x80
 8002fd6:	0112      	lsls	r2, r2, #4
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d012      	beq.n	8003002 <UART_SetConfig+0x156>
 8002fdc:	2280      	movs	r2, #128	; 0x80
 8002fde:	0112      	lsls	r2, r2, #4
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d826      	bhi.n	8003032 <UART_SetConfig+0x186>
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d004      	beq.n	8002ff2 <UART_SetConfig+0x146>
 8002fe8:	2280      	movs	r2, #128	; 0x80
 8002fea:	00d2      	lsls	r2, r2, #3
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d010      	beq.n	8003012 <UART_SetConfig+0x166>
 8002ff0:	e01f      	b.n	8003032 <UART_SetConfig+0x186>
 8002ff2:	231b      	movs	r3, #27
 8002ff4:	2218      	movs	r2, #24
 8002ff6:	4694      	mov	ip, r2
 8002ff8:	44bc      	add	ip, r7
 8002ffa:	4463      	add	r3, ip
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	e026      	b.n	8003050 <UART_SetConfig+0x1a4>
 8003002:	231b      	movs	r3, #27
 8003004:	2218      	movs	r2, #24
 8003006:	4694      	mov	ip, r2
 8003008:	44bc      	add	ip, r7
 800300a:	4463      	add	r3, ip
 800300c:	2202      	movs	r2, #2
 800300e:	701a      	strb	r2, [r3, #0]
 8003010:	e01e      	b.n	8003050 <UART_SetConfig+0x1a4>
 8003012:	231b      	movs	r3, #27
 8003014:	2218      	movs	r2, #24
 8003016:	4694      	mov	ip, r2
 8003018:	44bc      	add	ip, r7
 800301a:	4463      	add	r3, ip
 800301c:	2204      	movs	r2, #4
 800301e:	701a      	strb	r2, [r3, #0]
 8003020:	e016      	b.n	8003050 <UART_SetConfig+0x1a4>
 8003022:	231b      	movs	r3, #27
 8003024:	2218      	movs	r2, #24
 8003026:	4694      	mov	ip, r2
 8003028:	44bc      	add	ip, r7
 800302a:	4463      	add	r3, ip
 800302c:	2208      	movs	r2, #8
 800302e:	701a      	strb	r2, [r3, #0]
 8003030:	e00e      	b.n	8003050 <UART_SetConfig+0x1a4>
 8003032:	231b      	movs	r3, #27
 8003034:	2218      	movs	r2, #24
 8003036:	4694      	mov	ip, r2
 8003038:	44bc      	add	ip, r7
 800303a:	4463      	add	r3, ip
 800303c:	2210      	movs	r2, #16
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	e006      	b.n	8003050 <UART_SetConfig+0x1a4>
 8003042:	231b      	movs	r3, #27
 8003044:	2218      	movs	r2, #24
 8003046:	4694      	mov	ip, r2
 8003048:	44bc      	add	ip, r7
 800304a:	4463      	add	r3, ip
 800304c:	2210      	movs	r2, #16
 800304e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a61      	ldr	r2, [pc, #388]	; (80031dc <UART_SetConfig+0x330>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d000      	beq.n	800305c <UART_SetConfig+0x1b0>
 800305a:	e088      	b.n	800316e <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800305c:	231b      	movs	r3, #27
 800305e:	2218      	movs	r2, #24
 8003060:	4694      	mov	ip, r2
 8003062:	44bc      	add	ip, r7
 8003064:	4463      	add	r3, ip
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b08      	cmp	r3, #8
 800306a:	d01d      	beq.n	80030a8 <UART_SetConfig+0x1fc>
 800306c:	dc20      	bgt.n	80030b0 <UART_SetConfig+0x204>
 800306e:	2b04      	cmp	r3, #4
 8003070:	d015      	beq.n	800309e <UART_SetConfig+0x1f2>
 8003072:	dc1d      	bgt.n	80030b0 <UART_SetConfig+0x204>
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <UART_SetConfig+0x1d2>
 8003078:	2b02      	cmp	r3, #2
 800307a:	d005      	beq.n	8003088 <UART_SetConfig+0x1dc>
 800307c:	e018      	b.n	80030b0 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800307e:	f7ff fc53 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 8003082:	0003      	movs	r3, r0
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003086:	e01d      	b.n	80030c4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003088:	4b57      	ldr	r3, [pc, #348]	; (80031e8 <UART_SetConfig+0x33c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2210      	movs	r2, #16
 800308e:	4013      	ands	r3, r2
 8003090:	d002      	beq.n	8003098 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003092:	4b56      	ldr	r3, [pc, #344]	; (80031ec <UART_SetConfig+0x340>)
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003096:	e015      	b.n	80030c4 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 8003098:	4b55      	ldr	r3, [pc, #340]	; (80031f0 <UART_SetConfig+0x344>)
 800309a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800309c:	e012      	b.n	80030c4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800309e:	f7ff fb93 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 80030a2:	0003      	movs	r3, r0
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030a6:	e00d      	b.n	80030c4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	021b      	lsls	r3, r3, #8
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030ae:	e009      	b.n	80030c4 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80030b4:	231a      	movs	r3, #26
 80030b6:	2218      	movs	r2, #24
 80030b8:	4694      	mov	ip, r2
 80030ba:	44bc      	add	ip, r7
 80030bc:	4463      	add	r3, ip
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
        break;
 80030c2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d100      	bne.n	80030cc <UART_SetConfig+0x220>
 80030ca:	e139      	b.n	8003340 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	0013      	movs	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	189b      	adds	r3, r3, r2
 80030d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030d8:	429a      	cmp	r2, r3
 80030da:	d305      	bcc.n	80030e8 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d907      	bls.n	80030f8 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 80030e8:	231a      	movs	r3, #26
 80030ea:	2218      	movs	r2, #24
 80030ec:	4694      	mov	ip, r2
 80030ee:	44bc      	add	ip, r7
 80030f0:	4463      	add	r3, ip
 80030f2:	2201      	movs	r2, #1
 80030f4:	701a      	strb	r2, [r3, #0]
 80030f6:	e123      	b.n	8003340 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	6939      	ldr	r1, [r7, #16]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	000b      	movs	r3, r1
 8003106:	0e1b      	lsrs	r3, r3, #24
 8003108:	0010      	movs	r0, r2
 800310a:	0205      	lsls	r5, r0, #8
 800310c:	431d      	orrs	r5, r3
 800310e:	000b      	movs	r3, r1
 8003110:	021c      	lsls	r4, r3, #8
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	085b      	lsrs	r3, r3, #1
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	68b8      	ldr	r0, [r7, #8]
 8003120:	68f9      	ldr	r1, [r7, #12]
 8003122:	1900      	adds	r0, r0, r4
 8003124:	4169      	adcs	r1, r5
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	2300      	movs	r3, #0
 800312e:	607b      	str	r3, [r7, #4]
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f7fd f874 	bl	8000220 <__aeabi_uldivmod>
 8003138:	0002      	movs	r2, r0
 800313a:	000b      	movs	r3, r1
 800313c:	0013      	movs	r3, r2
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003142:	23c0      	movs	r3, #192	; 0xc0
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	429a      	cmp	r2, r3
 8003148:	d309      	bcc.n	800315e <UART_SetConfig+0x2b2>
 800314a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	035b      	lsls	r3, r3, #13
 8003150:	429a      	cmp	r2, r3
 8003152:	d204      	bcs.n	800315e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800315a:	60da      	str	r2, [r3, #12]
 800315c:	e0f0      	b.n	8003340 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800315e:	231a      	movs	r3, #26
 8003160:	2218      	movs	r2, #24
 8003162:	4694      	mov	ip, r2
 8003164:	44bc      	add	ip, r7
 8003166:	4463      	add	r3, ip
 8003168:	2201      	movs	r2, #1
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	e0e8      	b.n	8003340 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	69da      	ldr	r2, [r3, #28]
 8003172:	2380      	movs	r3, #128	; 0x80
 8003174:	021b      	lsls	r3, r3, #8
 8003176:	429a      	cmp	r2, r3
 8003178:	d000      	beq.n	800317c <UART_SetConfig+0x2d0>
 800317a:	e087      	b.n	800328c <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 800317c:	231b      	movs	r3, #27
 800317e:	2218      	movs	r2, #24
 8003180:	4694      	mov	ip, r2
 8003182:	44bc      	add	ip, r7
 8003184:	4463      	add	r3, ip
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b08      	cmp	r3, #8
 800318a:	d835      	bhi.n	80031f8 <UART_SetConfig+0x34c>
 800318c:	009a      	lsls	r2, r3, #2
 800318e:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <UART_SetConfig+0x348>)
 8003190:	18d3      	adds	r3, r2, r3
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003196:	f7ff fbc7 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 800319a:	0003      	movs	r3, r0
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800319e:	e035      	b.n	800320c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031a0:	f7ff fbd8 	bl	8002954 <HAL_RCC_GetPCLK2Freq>
 80031a4:	0003      	movs	r3, r0
 80031a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031a8:	e030      	b.n	800320c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031aa:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <UART_SetConfig+0x33c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2210      	movs	r2, #16
 80031b0:	4013      	ands	r3, r2
 80031b2:	d002      	beq.n	80031ba <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80031b4:	4b0d      	ldr	r3, [pc, #52]	; (80031ec <UART_SetConfig+0x340>)
 80031b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80031b8:	e028      	b.n	800320c <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 80031ba:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <UART_SetConfig+0x344>)
 80031bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031be:	e025      	b.n	800320c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031c0:	f7ff fb02 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 80031c4:	0003      	movs	r3, r0
 80031c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031c8:	e020      	b.n	800320c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	021b      	lsls	r3, r3, #8
 80031ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031d0:	e01c      	b.n	800320c <UART_SetConfig+0x360>
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	efff69f3 	.word	0xefff69f3
 80031d8:	ffffcfff 	.word	0xffffcfff
 80031dc:	40004800 	.word	0x40004800
 80031e0:	fffff4ff 	.word	0xfffff4ff
 80031e4:	40004400 	.word	0x40004400
 80031e8:	40021000 	.word	0x40021000
 80031ec:	003d0900 	.word	0x003d0900
 80031f0:	00f42400 	.word	0x00f42400
 80031f4:	080039bc 	.word	0x080039bc
      default:
        pclk = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80031fc:	231a      	movs	r3, #26
 80031fe:	2218      	movs	r2, #24
 8003200:	4694      	mov	ip, r2
 8003202:	44bc      	add	ip, r7
 8003204:	4463      	add	r3, ip
 8003206:	2201      	movs	r2, #1
 8003208:	701a      	strb	r2, [r3, #0]
        break;
 800320a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320e:	2b00      	cmp	r3, #0
 8003210:	d100      	bne.n	8003214 <UART_SetConfig+0x368>
 8003212:	e095      	b.n	8003340 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003216:	005a      	lsls	r2, r3, #1
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	085b      	lsrs	r3, r3, #1
 800321e:	18d2      	adds	r2, r2, r3
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	0019      	movs	r1, r3
 8003226:	0010      	movs	r0, r2
 8003228:	f7fc ff6e 	bl	8000108 <__udivsi3>
 800322c:	0003      	movs	r3, r0
 800322e:	b29b      	uxth	r3, r3
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003234:	2b0f      	cmp	r3, #15
 8003236:	d921      	bls.n	800327c <UART_SetConfig+0x3d0>
 8003238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	025b      	lsls	r3, r3, #9
 800323e:	429a      	cmp	r2, r3
 8003240:	d21c      	bcs.n	800327c <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003244:	b29a      	uxth	r2, r3
 8003246:	200e      	movs	r0, #14
 8003248:	2418      	movs	r4, #24
 800324a:	193b      	adds	r3, r7, r4
 800324c:	181b      	adds	r3, r3, r0
 800324e:	210f      	movs	r1, #15
 8003250:	438a      	bics	r2, r1
 8003252:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003256:	085b      	lsrs	r3, r3, #1
 8003258:	b29b      	uxth	r3, r3
 800325a:	2207      	movs	r2, #7
 800325c:	4013      	ands	r3, r2
 800325e:	b299      	uxth	r1, r3
 8003260:	193b      	adds	r3, r7, r4
 8003262:	181b      	adds	r3, r3, r0
 8003264:	193a      	adds	r2, r7, r4
 8003266:	1812      	adds	r2, r2, r0
 8003268:	8812      	ldrh	r2, [r2, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	193a      	adds	r2, r7, r4
 8003274:	1812      	adds	r2, r2, r0
 8003276:	8812      	ldrh	r2, [r2, #0]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	e061      	b.n	8003340 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800327c:	231a      	movs	r3, #26
 800327e:	2218      	movs	r2, #24
 8003280:	4694      	mov	ip, r2
 8003282:	44bc      	add	ip, r7
 8003284:	4463      	add	r3, ip
 8003286:	2201      	movs	r2, #1
 8003288:	701a      	strb	r2, [r3, #0]
 800328a:	e059      	b.n	8003340 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800328c:	231b      	movs	r3, #27
 800328e:	2218      	movs	r2, #24
 8003290:	4694      	mov	ip, r2
 8003292:	44bc      	add	ip, r7
 8003294:	4463      	add	r3, ip
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b08      	cmp	r3, #8
 800329a:	d822      	bhi.n	80032e2 <UART_SetConfig+0x436>
 800329c:	009a      	lsls	r2, r3, #2
 800329e:	4b30      	ldr	r3, [pc, #192]	; (8003360 <UART_SetConfig+0x4b4>)
 80032a0:	18d3      	adds	r3, r2, r3
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032a6:	f7ff fb3f 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 80032aa:	0003      	movs	r3, r0
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032ae:	e022      	b.n	80032f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032b0:	f7ff fb50 	bl	8002954 <HAL_RCC_GetPCLK2Freq>
 80032b4:	0003      	movs	r3, r0
 80032b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032b8:	e01d      	b.n	80032f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032ba:	4b2a      	ldr	r3, [pc, #168]	; (8003364 <UART_SetConfig+0x4b8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2210      	movs	r2, #16
 80032c0:	4013      	ands	r3, r2
 80032c2:	d002      	beq.n	80032ca <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80032c4:	4b28      	ldr	r3, [pc, #160]	; (8003368 <UART_SetConfig+0x4bc>)
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80032c8:	e015      	b.n	80032f6 <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 80032ca:	4b28      	ldr	r3, [pc, #160]	; (800336c <UART_SetConfig+0x4c0>)
 80032cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032ce:	e012      	b.n	80032f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032d0:	f7ff fa7a 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 80032d4:	0003      	movs	r3, r0
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032d8:	e00d      	b.n	80032f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032da:	2380      	movs	r3, #128	; 0x80
 80032dc:	021b      	lsls	r3, r3, #8
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032e0:	e009      	b.n	80032f6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80032e6:	231a      	movs	r3, #26
 80032e8:	2218      	movs	r2, #24
 80032ea:	4694      	mov	ip, r2
 80032ec:	44bc      	add	ip, r7
 80032ee:	4463      	add	r3, ip
 80032f0:	2201      	movs	r2, #1
 80032f2:	701a      	strb	r2, [r3, #0]
        break;
 80032f4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d021      	beq.n	8003340 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	085a      	lsrs	r2, r3, #1
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	18d2      	adds	r2, r2, r3
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	0019      	movs	r1, r3
 800330c:	0010      	movs	r0, r2
 800330e:	f7fc fefb 	bl	8000108 <__udivsi3>
 8003312:	0003      	movs	r3, r0
 8003314:	b29b      	uxth	r3, r3
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331a:	2b0f      	cmp	r3, #15
 800331c:	d909      	bls.n	8003332 <UART_SetConfig+0x486>
 800331e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003320:	2380      	movs	r3, #128	; 0x80
 8003322:	025b      	lsls	r3, r3, #9
 8003324:	429a      	cmp	r2, r3
 8003326:	d204      	bcs.n	8003332 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800332e:	60da      	str	r2, [r3, #12]
 8003330:	e006      	b.n	8003340 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003332:	231a      	movs	r3, #26
 8003334:	2218      	movs	r2, #24
 8003336:	4694      	mov	ip, r2
 8003338:	44bc      	add	ip, r7
 800333a:	4463      	add	r3, ip
 800333c:	2201      	movs	r2, #1
 800333e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	2200      	movs	r2, #0
 8003344:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	2200      	movs	r2, #0
 800334a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800334c:	231a      	movs	r3, #26
 800334e:	2218      	movs	r2, #24
 8003350:	4694      	mov	ip, r2
 8003352:	44bc      	add	ip, r7
 8003354:	4463      	add	r3, ip
 8003356:	781b      	ldrb	r3, [r3, #0]
}
 8003358:	0018      	movs	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	b00e      	add	sp, #56	; 0x38
 800335e:	bdb0      	pop	{r4, r5, r7, pc}
 8003360:	080039e0 	.word	0x080039e0
 8003364:	40021000 	.word	0x40021000
 8003368:	003d0900 	.word	0x003d0900
 800336c:	00f42400 	.word	0x00f42400

08003370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	2201      	movs	r2, #1
 800337e:	4013      	ands	r3, r2
 8003380:	d00b      	beq.n	800339a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4a4a      	ldr	r2, [pc, #296]	; (80034b4 <UART_AdvFeatureConfig+0x144>)
 800338a:	4013      	ands	r3, r2
 800338c:	0019      	movs	r1, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	2202      	movs	r2, #2
 80033a0:	4013      	ands	r3, r2
 80033a2:	d00b      	beq.n	80033bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	4a43      	ldr	r2, [pc, #268]	; (80034b8 <UART_AdvFeatureConfig+0x148>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	0019      	movs	r1, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	2204      	movs	r2, #4
 80033c2:	4013      	ands	r3, r2
 80033c4:	d00b      	beq.n	80033de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	4a3b      	ldr	r2, [pc, #236]	; (80034bc <UART_AdvFeatureConfig+0x14c>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	0019      	movs	r1, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	2208      	movs	r2, #8
 80033e4:	4013      	ands	r3, r2
 80033e6:	d00b      	beq.n	8003400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	4a34      	ldr	r2, [pc, #208]	; (80034c0 <UART_AdvFeatureConfig+0x150>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	0019      	movs	r1, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	2210      	movs	r2, #16
 8003406:	4013      	ands	r3, r2
 8003408:	d00b      	beq.n	8003422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	4a2c      	ldr	r2, [pc, #176]	; (80034c4 <UART_AdvFeatureConfig+0x154>)
 8003412:	4013      	ands	r3, r2
 8003414:	0019      	movs	r1, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	2220      	movs	r2, #32
 8003428:	4013      	ands	r3, r2
 800342a:	d00b      	beq.n	8003444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	4a25      	ldr	r2, [pc, #148]	; (80034c8 <UART_AdvFeatureConfig+0x158>)
 8003434:	4013      	ands	r3, r2
 8003436:	0019      	movs	r1, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	2240      	movs	r2, #64	; 0x40
 800344a:	4013      	ands	r3, r2
 800344c:	d01d      	beq.n	800348a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	4a1d      	ldr	r2, [pc, #116]	; (80034cc <UART_AdvFeatureConfig+0x15c>)
 8003456:	4013      	ands	r3, r2
 8003458:	0019      	movs	r1, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800346a:	2380      	movs	r3, #128	; 0x80
 800346c:	035b      	lsls	r3, r3, #13
 800346e:	429a      	cmp	r2, r3
 8003470:	d10b      	bne.n	800348a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	4a15      	ldr	r2, [pc, #84]	; (80034d0 <UART_AdvFeatureConfig+0x160>)
 800347a:	4013      	ands	r3, r2
 800347c:	0019      	movs	r1, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	2280      	movs	r2, #128	; 0x80
 8003490:	4013      	ands	r3, r2
 8003492:	d00b      	beq.n	80034ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	4a0e      	ldr	r2, [pc, #56]	; (80034d4 <UART_AdvFeatureConfig+0x164>)
 800349c:	4013      	ands	r3, r2
 800349e:	0019      	movs	r1, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	605a      	str	r2, [r3, #4]
  }
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b002      	add	sp, #8
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	fffdffff 	.word	0xfffdffff
 80034b8:	fffeffff 	.word	0xfffeffff
 80034bc:	fffbffff 	.word	0xfffbffff
 80034c0:	ffff7fff 	.word	0xffff7fff
 80034c4:	ffffefff 	.word	0xffffefff
 80034c8:	ffffdfff 	.word	0xffffdfff
 80034cc:	ffefffff 	.word	0xffefffff
 80034d0:	ff9fffff 	.word	0xff9fffff
 80034d4:	fff7ffff 	.word	0xfff7ffff

080034d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af02      	add	r7, sp, #8
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2280      	movs	r2, #128	; 0x80
 80034e4:	2100      	movs	r1, #0
 80034e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034e8:	f7fd fe92 	bl	8001210 <HAL_GetTick>
 80034ec:	0003      	movs	r3, r0
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2208      	movs	r2, #8
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d10c      	bne.n	8003518 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2280      	movs	r2, #128	; 0x80
 8003502:	0391      	lsls	r1, r2, #14
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	4a17      	ldr	r2, [pc, #92]	; (8003564 <UART_CheckIdleState+0x8c>)
 8003508:	9200      	str	r2, [sp, #0]
 800350a:	2200      	movs	r2, #0
 800350c:	f000 f82c 	bl	8003568 <UART_WaitOnFlagUntilTimeout>
 8003510:	1e03      	subs	r3, r0, #0
 8003512:	d001      	beq.n	8003518 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e021      	b.n	800355c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2204      	movs	r2, #4
 8003520:	4013      	ands	r3, r2
 8003522:	2b04      	cmp	r3, #4
 8003524:	d10c      	bne.n	8003540 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2280      	movs	r2, #128	; 0x80
 800352a:	03d1      	lsls	r1, r2, #15
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4a0d      	ldr	r2, [pc, #52]	; (8003564 <UART_CheckIdleState+0x8c>)
 8003530:	9200      	str	r2, [sp, #0]
 8003532:	2200      	movs	r2, #0
 8003534:	f000 f818 	bl	8003568 <UART_WaitOnFlagUntilTimeout>
 8003538:	1e03      	subs	r3, r0, #0
 800353a:	d001      	beq.n	8003540 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e00d      	b.n	800355c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2274      	movs	r2, #116	; 0x74
 8003556:	2100      	movs	r1, #0
 8003558:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	0018      	movs	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	b004      	add	sp, #16
 8003562:	bd80      	pop	{r7, pc}
 8003564:	01ffffff 	.word	0x01ffffff

08003568 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	603b      	str	r3, [r7, #0]
 8003574:	1dfb      	adds	r3, r7, #7
 8003576:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003578:	e05e      	b.n	8003638 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	3301      	adds	r3, #1
 800357e:	d05b      	beq.n	8003638 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003580:	f7fd fe46 	bl	8001210 <HAL_GetTick>
 8003584:	0002      	movs	r2, r0
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	429a      	cmp	r2, r3
 800358e:	d302      	bcc.n	8003596 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d11b      	bne.n	80035ce <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	492f      	ldr	r1, [pc, #188]	; (8003660 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80035a2:	400a      	ands	r2, r1
 80035a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2101      	movs	r1, #1
 80035b2:	438a      	bics	r2, r1
 80035b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2274      	movs	r2, #116	; 0x74
 80035c6:	2100      	movs	r1, #0
 80035c8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e044      	b.n	8003658 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2204      	movs	r2, #4
 80035d6:	4013      	ands	r3, r2
 80035d8:	d02e      	beq.n	8003638 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	2380      	movs	r3, #128	; 0x80
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	401a      	ands	r2, r3
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d124      	bne.n	8003638 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2280      	movs	r2, #128	; 0x80
 80035f4:	0112      	lsls	r2, r2, #4
 80035f6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4917      	ldr	r1, [pc, #92]	; (8003660 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003604:	400a      	ands	r2, r1
 8003606:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2101      	movs	r1, #1
 8003614:	438a      	bics	r2, r1
 8003616:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2280      	movs	r2, #128	; 0x80
 8003628:	2120      	movs	r1, #32
 800362a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2274      	movs	r2, #116	; 0x74
 8003630:	2100      	movs	r1, #0
 8003632:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e00f      	b.n	8003658 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	4013      	ands	r3, r2
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	425a      	negs	r2, r3
 8003648:	4153      	adcs	r3, r2
 800364a:	b2db      	uxtb	r3, r3
 800364c:	001a      	movs	r2, r3
 800364e:	1dfb      	adds	r3, r7, #7
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d091      	beq.n	800357a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	0018      	movs	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	b004      	add	sp, #16
 800365e:	bd80      	pop	{r7, pc}
 8003660:	fffffe5f 	.word	0xfffffe5f

08003664 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	1dbb      	adds	r3, r7, #6
 8003670:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1dba      	adds	r2, r7, #6
 800367c:	2158      	movs	r1, #88	; 0x58
 800367e:	8812      	ldrh	r2, [r2, #0]
 8003680:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2280      	movs	r2, #128	; 0x80
 8003686:	2100      	movs	r1, #0
 8003688:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2222      	movs	r2, #34	; 0x22
 800368e:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	2b00      	cmp	r3, #0
 8003696:	d02b      	beq.n	80036f0 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	4a25      	ldr	r2, [pc, #148]	; (8003734 <UART_Start_Receive_DMA+0xd0>)
 800369e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a4:	4a24      	ldr	r2, [pc, #144]	; (8003738 <UART_Start_Receive_DMA+0xd4>)
 80036a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ac:	4a23      	ldr	r2, [pc, #140]	; (800373c <UART_Start_Receive_DMA+0xd8>)
 80036ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b4:	2200      	movs	r2, #0
 80036b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3324      	adds	r3, #36	; 0x24
 80036c2:	0019      	movs	r1, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c8:	001a      	movs	r2, r3
 80036ca:	1dbb      	adds	r3, r7, #6
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	f7fd ff23 	bl	8001518 <HAL_DMA_Start_IT>
 80036d2:	1e03      	subs	r3, r0, #0
 80036d4:	d00c      	beq.n	80036f0 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2280      	movs	r2, #128	; 0x80
 80036da:	2110      	movs	r1, #16
 80036dc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2274      	movs	r2, #116	; 0x74
 80036e2:	2100      	movs	r1, #0
 80036e4:	5499      	strb	r1, [r3, r2]

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e01d      	b.n	800372c <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2274      	movs	r2, #116	; 0x74
 80036f4:	2100      	movs	r1, #0
 80036f6:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2180      	movs	r1, #128	; 0x80
 8003704:	0049      	lsls	r1, r1, #1
 8003706:	430a      	orrs	r2, r1
 8003708:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2101      	movs	r1, #1
 8003716:	430a      	orrs	r2, r1
 8003718:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2140      	movs	r1, #64	; 0x40
 8003726:	430a      	orrs	r2, r1
 8003728:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	0018      	movs	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	b004      	add	sp, #16
 8003732:	bd80      	pop	{r7, pc}
 8003734:	080037c9 	.word	0x080037c9
 8003738:	08003869 	.word	0x08003869
 800373c:	080038a5 	.word	0x080038a5

08003740 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	21c0      	movs	r1, #192	; 0xc0
 8003754:	438a      	bics	r2, r1
 8003756:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	679a      	str	r2, [r3, #120]	; 0x78
}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	46bd      	mov	sp, r7
 8003762:	b002      	add	sp, #8
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4912      	ldr	r1, [pc, #72]	; (80037c4 <UART_EndRxTransfer+0x5c>)
 800377c:	400a      	ands	r2, r1
 800377e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2101      	movs	r1, #1
 800378c:	438a      	bics	r2, r1
 800378e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003794:	2b01      	cmp	r3, #1
 8003796:	d107      	bne.n	80037a8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2110      	movs	r1, #16
 80037a4:	438a      	bics	r2, r1
 80037a6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	46bd      	mov	sp, r7
 80037be:	b002      	add	sp, #8
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	fffffedf 	.word	0xfffffedf

080037c8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2220      	movs	r2, #32
 80037de:	4013      	ands	r3, r2
 80037e0:	d12a      	bne.n	8003838 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	225a      	movs	r2, #90	; 0x5a
 80037e6:	2100      	movs	r1, #0
 80037e8:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	491b      	ldr	r1, [pc, #108]	; (8003864 <UART_DMAReceiveCplt+0x9c>)
 80037f6:	400a      	ands	r2, r1
 80037f8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2101      	movs	r1, #1
 8003806:	438a      	bics	r2, r1
 8003808:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2140      	movs	r1, #64	; 0x40
 8003816:	438a      	bics	r2, r1
 8003818:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2220      	movs	r2, #32
 800381e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003824:	2b01      	cmp	r3, #1
 8003826:	d107      	bne.n	8003838 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2110      	movs	r1, #16
 8003834:	438a      	bics	r2, r1
 8003836:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383c:	2b01      	cmp	r3, #1
 800383e:	d108      	bne.n	8003852 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2258      	movs	r2, #88	; 0x58
 8003844:	5a9a      	ldrh	r2, [r3, r2]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	0011      	movs	r1, r2
 800384a:	0018      	movs	r0, r3
 800384c:	f7ff fb22 	bl	8002e94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003850:	e003      	b.n	800385a <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	0018      	movs	r0, r3
 8003856:	f7fc fe21 	bl	800049c <HAL_UART_RxCpltCallback>
}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	46bd      	mov	sp, r7
 800385e:	b004      	add	sp, #16
 8003860:	bd80      	pop	{r7, pc}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	fffffeff 	.word	0xfffffeff

08003868 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800387a:	2b01      	cmp	r3, #1
 800387c:	d10a      	bne.n	8003894 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2258      	movs	r2, #88	; 0x58
 8003882:	5a9b      	ldrh	r3, [r3, r2]
 8003884:	085b      	lsrs	r3, r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	0011      	movs	r1, r2
 800388c:	0018      	movs	r0, r3
 800388e:	f7ff fb01 	bl	8002e94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003892:	e003      	b.n	800389c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	0018      	movs	r0, r3
 8003898:	f7ff faec 	bl	8002e74 <HAL_UART_RxHalfCpltCallback>
}
 800389c:	46c0      	nop			; (mov r8, r8)
 800389e:	46bd      	mov	sp, r7
 80038a0:	b004      	add	sp, #16
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038b6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2280      	movs	r2, #128	; 0x80
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b80      	cmp	r3, #128	; 0x80
 80038ca:	d10a      	bne.n	80038e2 <UART_DMAError+0x3e>
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b21      	cmp	r3, #33	; 0x21
 80038d0:	d107      	bne.n	80038e2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2252      	movs	r2, #82	; 0x52
 80038d6:	2100      	movs	r1, #0
 80038d8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	0018      	movs	r0, r3
 80038de:	f7ff ff2f 	bl	8003740 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2240      	movs	r2, #64	; 0x40
 80038ea:	4013      	ands	r3, r2
 80038ec:	2b40      	cmp	r3, #64	; 0x40
 80038ee:	d10a      	bne.n	8003906 <UART_DMAError+0x62>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b22      	cmp	r3, #34	; 0x22
 80038f4:	d107      	bne.n	8003906 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	225a      	movs	r2, #90	; 0x5a
 80038fa:	2100      	movs	r1, #0
 80038fc:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	0018      	movs	r0, r3
 8003902:	f7ff ff31 	bl	8003768 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2280      	movs	r2, #128	; 0x80
 800390a:	589b      	ldr	r3, [r3, r2]
 800390c:	2210      	movs	r2, #16
 800390e:	431a      	orrs	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2180      	movs	r1, #128	; 0x80
 8003914:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	0018      	movs	r0, r3
 800391a:	f7ff fab3 	bl	8002e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b006      	add	sp, #24
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <__libc_init_array>:
 8003928:	b570      	push	{r4, r5, r6, lr}
 800392a:	2600      	movs	r6, #0
 800392c:	4d0c      	ldr	r5, [pc, #48]	; (8003960 <__libc_init_array+0x38>)
 800392e:	4c0d      	ldr	r4, [pc, #52]	; (8003964 <__libc_init_array+0x3c>)
 8003930:	1b64      	subs	r4, r4, r5
 8003932:	10a4      	asrs	r4, r4, #2
 8003934:	42a6      	cmp	r6, r4
 8003936:	d109      	bne.n	800394c <__libc_init_array+0x24>
 8003938:	2600      	movs	r6, #0
 800393a:	f000 f821 	bl	8003980 <_init>
 800393e:	4d0a      	ldr	r5, [pc, #40]	; (8003968 <__libc_init_array+0x40>)
 8003940:	4c0a      	ldr	r4, [pc, #40]	; (800396c <__libc_init_array+0x44>)
 8003942:	1b64      	subs	r4, r4, r5
 8003944:	10a4      	asrs	r4, r4, #2
 8003946:	42a6      	cmp	r6, r4
 8003948:	d105      	bne.n	8003956 <__libc_init_array+0x2e>
 800394a:	bd70      	pop	{r4, r5, r6, pc}
 800394c:	00b3      	lsls	r3, r6, #2
 800394e:	58eb      	ldr	r3, [r5, r3]
 8003950:	4798      	blx	r3
 8003952:	3601      	adds	r6, #1
 8003954:	e7ee      	b.n	8003934 <__libc_init_array+0xc>
 8003956:	00b3      	lsls	r3, r6, #2
 8003958:	58eb      	ldr	r3, [r5, r3]
 800395a:	4798      	blx	r3
 800395c:	3601      	adds	r6, #1
 800395e:	e7f2      	b.n	8003946 <__libc_init_array+0x1e>
 8003960:	08003a0c 	.word	0x08003a0c
 8003964:	08003a0c 	.word	0x08003a0c
 8003968:	08003a0c 	.word	0x08003a0c
 800396c:	08003a10 	.word	0x08003a10

08003970 <memset>:
 8003970:	0003      	movs	r3, r0
 8003972:	1882      	adds	r2, r0, r2
 8003974:	4293      	cmp	r3, r2
 8003976:	d100      	bne.n	800397a <memset+0xa>
 8003978:	4770      	bx	lr
 800397a:	7019      	strb	r1, [r3, #0]
 800397c:	3301      	adds	r3, #1
 800397e:	e7f9      	b.n	8003974 <memset+0x4>

08003980 <_init>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003986:	bc08      	pop	{r3}
 8003988:	469e      	mov	lr, r3
 800398a:	4770      	bx	lr

0800398c <_fini>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr
